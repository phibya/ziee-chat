/**
 * Generated API endpoint definitions
 * Auto-generated from OpenAPI specification
 * 
 * ⚠️  DO NOT EDIT THIS FILE MANUALLY ⚠️
 * This file is automatically generated from the OpenAPI specification generated from the server code.
 */

// =============================================================================
// TYPE DEFINITIONS
// =============================================================================

export interface ApiProxyServerConfig {
  port: number
  address: string
  prefix: string
  api_key: string
  allow_cors: boolean
  log_level: string
  autostart_on_startup: boolean
}

export interface ApiProxyServerModel {
  id: string
  model_id: string
  alias_id?: string
  enabled: boolean
  is_default: boolean
  created_at: string
  updated_at: string
}

export interface ApiProxyServerStatus {
  running: boolean
  active_models: number
  server_url?: string
}

export interface ApiProxyServerTrustedHost {
  description?: string
  id: string
  host: string
  enabled: boolean
  created_at: string
  updated_at: string
}

export interface AssignProviderToGroupRequest {
  group_id: string
  provider_id: string
}

export interface AssignUserToGroupRequest {
  user_id: string
  group_id: string
}

export interface Assistant {
  description?: string
  id: string
  name: string
  instructions?: string
  parameters?: ModelParameters
  created_by?: string
  is_template: boolean
  is_default: boolean
  is_active: boolean
  created_at: string
  updated_at: string
}

export interface AssistantListResponse {
  assistants: Assistant[]
  total: number
  page: number
  per_page: number
}

export interface AuthResponse {
  token: string
  user: User
  expires_at: string
}

export interface AvailableDevicesResponse {
  devices: DeviceInfo[]
  default_device_type: DeviceType
  supports_multi_gpu: boolean
}

export interface CPUInfo {
  model: string
  architecture: string
  cores: number
  threads?: number
  base_frequency?: number
  max_frequency?: number
}

export interface CPUUsage {
  usage_percentage: number
  temperature?: number
  frequency?: number
}

export interface ChatMessageRequest {
  conversation_id: string
  content: string
  model_id: string
  assistant_id: string
  file_ids?: string[]
}

export interface Conversation {
  title: string
  id: string
  user_id: string
  project_id?: string
  assistant_id?: string
  model_id?: string
  active_branch_id: string
  created_at: string
  updated_at: string
}

export interface ConversationListResponse {
  conversations: ConversationSummary[]
  total: number
  page: number
  per_page: number
}

export interface ConversationPaginationQuery {
  page?: number
  per_page?: number
  project_id?: string
}

export interface ConversationSummary {
  title: string
  id: string
  user_id: string
  project_id?: string
  assistant_id?: string
  model_id?: string
  created_at: string
  updated_at: string
  last_message?: string
  message_count: number
}

export interface CreateApiProxyServerModelRequest {
  model_id: string
  alias_id?: string
  enabled?: boolean
  is_default?: boolean
}

export interface CreateAssistantRequest {
  description?: string
  name: string
  instructions?: string
  parameters?: ModelParameters
  is_template?: boolean
  is_default?: boolean
}

export interface CreateConversationRequest {
  title: string
  project_id?: string
  assistant_id: string
  model_id: string
}

export interface CreateModelRequest {
  description?: string
  provider_id: string
  name: string
  alias: string
  enabled?: boolean
  capabilities?: ModelCapabilities
  parameters?: ModelParameters
  engine_type: EngineType
  engine_settings_mistralrs?: MistralRsSettings
  engine_settings_llamacpp?: LlamaCppSettings
  file_format: FileFormat
  source?: SourceInfo
}

export interface CreateProjectRequest {
  description?: string
  name: string
  instruction?: string
}

export interface CreateProviderRequest {
  type: string
  name: string
  enabled?: boolean
  api_key?: string
  base_url?: string
  proxy_settings?: ProxySettings
}

export interface CreateRAGDatabaseRequest {
  description?: string
  name: string
  alias: string
  enabled?: boolean
  collection_name?: string
  embedding_model?: string
  chunk_size?: number
  chunk_overlap?: number
  capabilities?: RAGDatabaseCapabilities
  settings?: any
}

export interface CreateRAGProviderRequest {
  type: string
  name: string
  enabled?: boolean
  api_key?: string
  base_url?: string
}

export interface CreateRAGRepositoryRequest {
  description?: string
  name: string
  url: string
  enabled?: boolean
  requires_auth?: boolean
  auth_token?: string
  priority?: number
}

export interface CreateRepositoryRequest {
  name: string
  url: string
  auth_type: string
  auth_config?: RepositoryAuthConfig
  enabled?: boolean
}

export interface CreateTrustedHostRequest {
  description?: string
  host: string
  enabled?: boolean
}

export interface CreateUserGroupRequest {
  description?: string
  name: string
  permissions: string[]
  provider_ids?: string[]
}

export interface CreateUserRequest {
  username: string
  email: string
  password: string
  profile?: any
}

export interface DefaultLanguageResponse {
  language: string
}

export interface DeviceInfo {
  id: number
  name: string
  device_type: DeviceType
  memory_total?: number
  memory_free?: number
  is_available: boolean
}

export type DeviceType = any

export interface DownloadFromRepositoryRequest {
  description?: string
  provider_id: string
  repository_id: string
  repository_path: string
  repository_branch?: string
  name: string
  alias: string
  file_format: FileFormat
  main_filename: string
  capabilities?: ModelCapabilities
  parameters?: ModelParameters
  engine_type?: EngineType
  engine_settings_mistralrs?: MistralRsSettings
  engine_settings_llamacpp?: LlamaCppSettings
  source: SourceInfo
}

export interface DownloadInstance {
  id: string
  provider_id: string
  repository_id: string
  request_data: DownloadRequestData
  status: DownloadStatus
  progress_data?: DownloadProgressData
  error_message?: string
  started_at: string
  completed_at?: string
  model_id?: string
  created_at: string
  updated_at: string
}

export interface DownloadInstanceListResponse {
  downloads: DownloadInstance[]
  total: number
  page: number
  per_page: number
}

export interface DownloadPaginationQuery {
  page?: number
  per_page?: number
  status?: string
}

export type DownloadPhase = 'created' | 'connecting' | 'analyzing' | 'downloading' | 'receiving' | 'resolving' | 'checkingout' | 'committing' | 'complete' | 'error'

export interface DownloadProgressData {
  phase: DownloadPhase
  current: number
  total: number
  message: string
  speed_bps: number
  eta_seconds: number
}

export interface DownloadProgressUpdate {
  id: string
  status: string
  phase: DownloadPhase
  current?: number
  total?: number
  message?: string
  speed_bps?: number
  eta_seconds?: number
  error_message?: string
}

export interface DownloadRAGDatabaseFromRepositoryRequest {
  repository_id: string
  database_id: string
  target_provider_id: string
  database_name?: string
  database_alias?: string
}

export interface DownloadRequestData {
  description?: string
  model_name: string
  revision?: string
  files?: string[]
  quantization?: string
  repository_path?: string
  alias?: string
  file_format?: string
  main_filename?: string
  capabilities?: ModelCapabilities
  parameters?: ModelParameters
  engine_type?: EngineType
  engine_settings_mistralrs?: MistralRsSettings
  engine_settings_llamacpp?: LlamaCppSettings
  source?: SourceInfo
}

export type DownloadStatus = 'pending' | 'downloading' | 'completed' | 'failed' | 'cancelled'

export interface DownloadTokenParams {
  token?: string
}

export interface DownloadTokenResponse {
  token: string
  expires_at: string
}

export interface EngineInfo {
  engine_type: EngineType
  name: string
  version: string
  status: string
  supported_architectures?: string[]
}

export type EngineType = 'mistralrs' | 'llamacpp' | 'none'

export interface File {
  id: string
  user_id: string
  filename: string
  file_size: number
  mime_type?: string
  checksum?: string
  project_id?: string
  thumbnail_count: number
  page_count: number
  processing_metadata: any
  created_at: string
  updated_at: string
}

export type FileFormat = 'safetensors' | 'pytorch' | 'gguf'

export interface FileListParams {
  page?: number
  per_page?: number
  search?: string
}

export interface FileListResponse {
  files: File[]
  total: number
  page: number
  per_page: number
}

export interface FileOperationSuccessResponse {
  success: boolean
}

export interface GPUComputeCapabilities {
  cuda_support: boolean
  cuda_version?: string
  metal_support: boolean
  opencl_support: boolean
  vulkan_support?: boolean
}

export interface GPUDevice {
  device_id: string
  name: string
  vendor: string
  memory?: number
  driver_version?: string
  compute_capabilities: GPUComputeCapabilities
}

export interface GPUUsage {
  device_id: string
  device_name: string
  utilization_percentage?: number
  memory_used?: number
  memory_total?: number
  memory_usage_percentage?: number
  temperature?: number
  power_usage?: number
}

export interface HardwareInfo {
  operating_system: OperatingSystemInfo
  cpu: CPUInfo
  memory: MemoryInfo
  gpu_devices: GPUDevice[]
}

export interface HardwareInfoResponse {
  hardware: HardwareInfo
}

export interface HardwareUsageUpdate {
  timestamp: string
  cpu: CPUUsage
  memory: MemoryUsage
  gpu_devices: GPUUsage[]
}

export interface HubAssistant {
  description?: string
  id: string
  name: string
  instructions?: string
  parameters?: any
  category: string
  tags: string[]
  recommended_models: string[]
  capabilities_required: string[]
  popularity_score?: number
  author?: string
  use_cases?: string[]
  example_prompts?: string[]
}

export interface HubModel {
  description?: string
  id: string
  name: string
  alias: string
  repository_url: string
  repository_path: string
  main_filename: string
  file_format: FileFormat
  capabilities?: ModelCapabilities
  size_gb: number
  tags: string[]
  recommended_parameters?: any
  public: boolean
  popularity_score?: number
  license?: string
  quantization_options?: string[]
  context_length?: number
  language_support?: string[]
  recommended_engine?: EngineType
  recommended_engine_settings?: any
}

export interface HubQueryParams {
  lang?: string
}

export interface HubVersionResponse {
  hub_version: string
}

export interface InitResponse {
  needs_setup: boolean
  is_desktop: boolean
  token?: string
}

export interface LlamaCppSettings {
  device_type?: DeviceType
  device_ids?: number[]
  ctx_size?: number
  batch_size?: number
  ubatch_size?: number
  parallel?: number
  keep?: number
  mlock?: boolean
  no_mmap?: boolean
  threads?: number
  threads_batch?: number
  cont_batching?: boolean
  flash_attn?: boolean
  no_kv_offload?: boolean
  n_gpu_layers?: number
  main_gpu?: number
  split_mode?: string
  tensor_split?: string
  rope_freq_base?: number
  rope_freq_scale?: number
  rope_scaling?: string
  cache_type_k?: string
  cache_type_v?: string
  seed?: number
  numa?: string
}

export interface LoginRequest {
  username_or_email: string
  password: string
}

export interface MemoryInfo {
  total_ram: number
  total_swap?: number
}

export interface MemoryUsage {
  used_ram: number
  available_ram: number
  used_swap?: number
  available_swap?: number
  usage_percentage: number
}

export interface Message {
  id: string
  conversation_id: string
  role: string
  content: string
  originated_from_id: string
  edit_count: number
  created_at: string
  updated_at: string
  metadata?: MessageMetadata[]
  files: File[]
}

export interface MessageBranch {
  id: string
  conversation_id: string
  created_at: string
  is_clone: boolean
}

export interface MessageMetadata {
  id: string
  message_id: string
  key: string
  value: any
  created_at: string
}

export type MistralRsCommand = any

export interface MistralRsSettings {
  command?: MistralRsCommand
  model_id_name?: string
  tokenizer_json?: string
  arch?: string
  quantized_filename?: string
  weight_file?: string
  device_type?: DeviceType
  device_ids?: number[]
  num_device_layers?: string[]
  cpu?: boolean
  max_seqs?: number
  max_seq_len?: number
  no_kv_cache?: boolean
  truncate_sequence?: boolean
  paged_attn_gpu_mem?: number
  paged_attn_gpu_mem_usage?: number
  paged_ctxt_len?: number
  paged_attn_block_size?: number
  no_paged_attn?: boolean
  paged_attn?: boolean
  chat_template?: string
  jinja_explicit?: string
  prefix_cache_n?: number
  prompt_chunksize?: number
  dtype?: string
  in_situ_quant?: string
  seed?: number
  max_edge?: number
  max_num_images?: number
  max_image_length?: number
  serve_ip?: string
  log_file?: string
  enable_search?: boolean
  search_bert_model?: string
  interactive_mode?: boolean
  enable_thinking?: boolean
  token_source?: string
}

export interface Model {
  description?: string
  id: string
  provider_id: string
  name: string
  alias: string
  enabled: boolean
  is_deprecated: boolean
  is_active: boolean
  capabilities?: ModelCapabilities
  parameters?: ModelParameters
  created_at: string
  updated_at: string
  file_size_bytes?: number
  validation_status?: string
  validation_issues?: string[]
  port?: number
  pid?: number
  engine_type: EngineType
  engine_settings_mistralrs?: MistralRsSettings
  engine_settings_llamacpp?: LlamaCppSettings
  file_format: FileFormat
  source?: SourceInfo
  files?: ModelFileInfo[]
}

export interface ModelCapabilities {
  vision?: boolean
  audio?: boolean
  tools?: boolean
  code_interpreter?: boolean
}

export interface ModelFileInfo {
  filename: string
  file_size_bytes: number
  file_type: string
  uploaded_at: string
}

export interface ModelParameters {
  max_tokens?: number
  temperature?: number
  top_k?: number
  top_p?: number
  min_p?: number
  repeat_last_n?: number
  repeat_penalty?: number
  presence_penalty?: number
  frequency_penalty?: number
  seed?: number
  stop?: string[]
}

export interface NgrokSettingsResponse {
  api_key: string
  tunnel_enabled: boolean
  tunnel_url?: string
  tunnel_status: string
  auto_start: boolean
  domain?: string
}

export interface NgrokStatusResponse {
  tunnel_active: boolean
  tunnel_url?: string
  tunnel_status: string
  last_error?: string
}

export interface OperatingSystemInfo {
  name: string
  version: string
  kernel_version?: string
  architecture: string
}

export interface OperationSuccessResponse {
  success: boolean
  message: string
}

export interface PaginationQuery {
  page?: number
  per_page?: number
}

export interface PasswordService {
  bcrypt: string
  salt: string
}

export enum Permission {
  UsersRead = 'users::read',
  UsersEdit = 'users::edit',
  UsersDelete = 'users::delete',
  UsersCreate = 'users::create',
  UsersResetPassword = 'users::reset-password',
  UsersToggleStatus = 'users::toggle-status',
  GroupsRead = 'groups::read',
  GroupsEdit = 'groups::edit',
  GroupsDelete = 'groups::delete',
  GroupsCreate = 'groups::create',
  GroupsAssignUsers = 'groups::assign-users',
  GroupsAssignProviders = 'groups::assign-providers',
  ChatRead = 'chat::read',
  ChatCreate = 'chat::create',
  ChatEdit = 'chat::edit',
  ChatDelete = 'chat::delete',
  ChatStream = 'chat::stream',
  ChatSearch = 'chat::search',
  ChatBranch = 'chat::branch',
  ProjectsRead = 'projects::read',
  ProjectsCreate = 'projects::create',
  ProjectsEdit = 'projects::edit',
  ProjectsDelete = 'projects::delete',
  FilesRead = 'files::read',
  FilesUpload = 'files::upload',
  FilesDelete = 'files::delete',
  FilesDownload = 'files::download',
  FilesPreview = 'files::preview',
  FilesGenerateToken = 'files::generate-token',
  AssistantsRead = 'assistants::read',
  AssistantsCreate = 'assistants::create',
  AssistantsEdit = 'assistants::edit',
  AssistantsDelete = 'assistants::delete',
  AssistantsAdminRead = 'assistants::admin::read',
  AssistantsAdminCreate = 'assistants::admin::create',
  AssistantsAdminEdit = 'assistants::admin::edit',
  AssistantsAdminDelete = 'assistants::admin::delete',
  SettingsRead = 'settings::read',
  SettingsEdit = 'settings::edit',
  SettingsDelete = 'settings::delete',
  ProvidersRead = 'providers::read',
  ProvidersEdit = 'providers::edit',
  ProvidersDelete = 'providers::delete',
  ProvidersCreate = 'providers::create',
  ProvidersViewGroups = 'providers::view-groups',
  ModelsRead = 'models::read',
  ModelsCreate = 'models::create',
  ModelsEdit = 'models::edit',
  ModelsDelete = 'models::delete',
  ModelsStart = 'models::start',
  ModelsStop = 'models::stop',
  ModelsEnable = 'models::enable',
  ModelsDisable = 'models::disable',
  ModelsUpload = 'models::upload',
  RepositoriesRead = 'repositories::read',
  RepositoriesEdit = 'repositories::edit',
  RepositoriesDelete = 'repositories::delete',
  RepositoriesCreate = 'repositories::create',
  RagProvidersRead = 'rag::providers::read',
  RagProvidersCreate = 'rag::providers::create',
  RagProvidersEdit = 'rag::providers::edit',
  RagProvidersDelete = 'rag::providers::delete',
  RagRepositoriesRead = 'rag::repositories::read',
  RagRepositoriesCreate = 'rag::repositories::create',
  RagRepositoriesEdit = 'rag::repositories::edit',
  RagRepositoriesDelete = 'rag::repositories::delete',
  ModelDownloadsRead = 'model-downloads::read',
  ModelDownloadsCreate = 'model-downloads::create',
  ModelDownloadsCancel = 'model-downloads::cancel',
  ModelDownloadsDelete = 'model-downloads::delete',
  HardwareRead = 'hardware::read',
  HardwareMonitor = 'hardware::monitor',
  DevicesRead = 'devices::read',
  EnginesRead = 'engines::read',
  ApiProxyRead = 'api-proxy::read',
  ApiProxyStart = 'api-proxy::start',
  ApiProxyStop = 'api-proxy::stop',
  ApiProxyConfigure = 'api-proxy::configure',
  ConfigUserRegistrationRead = 'config::user-registration::read',
  ConfigUserRegistrationEdit = 'config::user-registration::edit',
  ConfigAppearanceRead = 'config::appearance::read',
  ConfigAppearanceEdit = 'config::appearance::edit',
  ConfigProxyRead = 'config::proxy::read',
  ConfigProxyEdit = 'config::proxy::edit',
  ConfigNgrokRead = 'config::ngrok::read',
  ConfigNgrokEdit = 'config::ngrok::edit',
  ConfigNgrokStart = 'config::ngrok::start',
  ConfigNgrokStop = 'config::ngrok::stop',
  HubModelsRead = 'hub::models::read',
  HubAssistantsRead = 'hub::assistants::read',
  HubRefresh = 'hub::refresh',
  HubVersionRead = 'hub::version::read',
  All = '*'
}

export interface PreviewParams {
  page?: number
}

export interface Project {
  description?: string
  id: string
  user_id: string
  name: string
  instruction?: string
  created_at: string
  updated_at: string
}

export interface ProjectDetailResponse {
  project: Project
  conversations: Conversation[]
}

export interface ProjectListQuery {
  page?: number
  per_page?: number
  search?: string
}

export interface ProjectListResponse {
  projects: Project[]
  total: number
  page: number
  per_page: number
}

export interface Provider {
  type: ProviderType
  id: string
  name: string
  enabled: boolean
  api_key?: string
  base_url?: string
  built_in: boolean
  proxy_settings?: ProxySettings
  created_at: string
  updated_at: string
}

export interface ProviderListResponse {
  providers: Provider[]
  total: number
  page: number
  per_page: number
}

export type ProviderType = 'local' | 'openai' | 'anthropic' | 'groq' | 'gemini' | 'mistral' | 'deepseek' | 'huggingface' | 'custom'

export interface ProxySettings {
  enabled?: boolean
  url?: string
  username?: string
  password?: string
  no_proxy?: string
  ignore_ssl_certificates?: boolean
}

export interface ProxySettingsResponse {
  enabled: boolean
  url: string
  username: string
  password: string
  no_proxy: string
  ignore_ssl_certificates: boolean
}

export interface RAGDatabase {
  description?: string
  id: string
  provider_id: string
  name: string
  alias: string
  enabled: boolean
  is_active: boolean
  collection_name?: string
  embedding_model?: string
  chunk_size: number
  chunk_overlap: number
  capabilities?: RAGDatabaseCapabilities
  settings?: any
  created_at: string
  updated_at: string
}

export interface RAGDatabaseCapabilities {
  semantic_search?: boolean
  hybrid_search?: boolean
  metadata_filtering?: boolean
  similarity_threshold?: boolean
}

export interface RAGProvider {
  type: RAGProviderType
  id: string
  name: string
  enabled: boolean
  api_key?: string
  base_url?: string
  built_in: boolean
  proxy_settings?: ProxySettings
  created_at: string
  updated_at: string
}

export interface RAGProviderListResponse {
  providers: RAGProvider[]
  total: number
  page: number
  per_page: number
}

export type RAGProviderType = 'local' | 'lightrag' | 'ragstack' | 'chroma' | 'weaviate' | 'pinecone' | 'custom'

export interface RAGRepository {
  description?: string
  id: string
  name: string
  url: string
  enabled: boolean
  requires_auth: boolean
  auth_token?: string
  priority: number
  created_at: string
  updated_at: string
}

export interface RAGRepositoryConnectionTestResponse {
  success: boolean
  message: string
  available_databases_count?: number
}

export interface RAGRepositoryListResponse {
  repositories: RAGRepository[]
  total: number
  page: number
  per_page: number
}

export interface Repository {
  id: string
  name: string
  url: string
  auth_type: string
  auth_config?: RepositoryAuthConfig
  enabled: boolean
  built_in: boolean
  created_at: string
  updated_at: string
}

export interface RepositoryAuthConfig {
  api_key?: string
  username?: string
  password?: string
  token?: string
  auth_test_api_endpoint?: string
}

export interface RepositoryListResponse {
  repositories: Repository[]
  total: number
  page: number
  per_page: number
}

export interface ResetPasswordRequest {
  user_id: string
  new_password: string
}

export interface SearchQuery {
  q: string
  page?: number
  per_page?: number
  project_id?: string
}

export interface SourceInfo {
  type: string
  id?: string
}

export interface SwitchBranchRequest {
  branch_id: string
}

export interface TestProxyConnectionRequest {
  enabled: boolean
  url: string
  username: string
  password: string
  no_proxy: string
  ignore_ssl_certificates: boolean
}

export interface TestProxyConnectionResponse {
  success: boolean
  message: string
}

export interface TestRepositoryConnectionRequest {
  name: string
  url: string
  auth_type: string
  auth_config?: RepositoryAuthConfig
}

export interface TestRepositoryConnectionResponse {
  success: boolean
  message: string
}

export interface UpdateApiProxyServerModelRequest {
  alias_id?: string
  enabled?: boolean
  is_default?: boolean
}

export interface UpdateAssistantRequest {
  description?: string
  name?: string
  instructions?: string
  parameters?: ModelParameters
  is_template?: boolean
  is_default?: boolean
  is_active?: boolean
}

export interface UpdateConversationRequest {
  title?: string
  assistant_id?: string
  model_id?: string
}

export interface UpdateDefaultLanguageRequest {
  language: string
}

export interface UpdateModelRequest {
  description?: string
  name?: string
  alias?: string
  enabled?: boolean
  is_active?: boolean
  capabilities?: ModelCapabilities
  parameters?: ModelParameters
  engine_type?: EngineType
  engine_settings_mistralrs?: MistralRsSettings
  engine_settings_llamacpp?: LlamaCppSettings
  file_format?: FileFormat
}

export interface UpdateNgrokSettingsRequest {
  api_key?: string
  tunnel_enabled?: boolean
  auto_start?: boolean
  domain?: string
}

export interface UpdateProjectRequest {
  description?: string
  name?: string
  instruction?: string
}

export interface UpdateProviderRequest {
  name?: string
  enabled?: boolean
  api_key?: string
  base_url?: string
  proxy_settings?: ProxySettings
}

export interface UpdateProxySettingsRequest {
  enabled: boolean
  url: string
  username: string
  password: string
  no_proxy: string
  ignore_ssl_certificates: boolean
}

export interface UpdateRAGDatabaseRequest {
  description?: string
  name?: string
  alias?: string
  enabled?: boolean
  collection_name?: string
  embedding_model?: string
  chunk_size?: number
  chunk_overlap?: number
  capabilities?: RAGDatabaseCapabilities
  settings?: any
}

export interface UpdateRAGProviderRequest {
  name?: string
  enabled?: boolean
  api_key?: string
  base_url?: string
  proxy_settings?: ProxySettings
}

export interface UpdateRAGRepositoryRequest {
  description?: string
  name?: string
  url?: string
  enabled?: boolean
  requires_auth?: boolean
  auth_token?: string
  priority?: number
}

export interface UpdateRepositoryRequest {
  name?: string
  url?: string
  auth_type?: string
  auth_config?: RepositoryAuthConfig
  enabled?: boolean
}

export interface UpdateTrustedHostRequest {
  description?: string
  host?: string
  enabled?: boolean
}

export interface UpdateUserGroupRequest {
  description?: string
  name?: string
  permissions?: string[]
  provider_ids?: string[]
  is_active?: boolean
}

export interface UpdateUserPasswordRequest {
  current_password?: string
  new_password: string
}

export interface UpdateUserRegistrationRequest {
  enabled: boolean
}

export interface UpdateUserRequest {
  username?: string
  email?: string
  is_active?: boolean
  profile?: any
}

export interface UploadFileResponse {
  file: File
}

export interface User {
  id: string
  username: string
  emails: UserEmail[]
  created_at: string
  profile?: any
  services: UserServices
  is_active: boolean
  is_protected: boolean
  last_login_at?: string
  updated_at: string
  groups: UserGroup[]
}

export interface UserActiveStatusResponse {
  is_active: boolean
}

export interface UserEmail {
  id: string
  user_id: string
  address: string
  verified: boolean
  created_at: string
}

export interface UserGroup {
  description?: string
  id: string
  name: string
  permissions: string[]
  provider_ids: string[]
  is_protected: boolean
  is_active: boolean
  created_at: string
  updated_at: string
}

export interface UserGroupListResponse {
  groups: UserGroup[]
  total: number
  page: number
  per_page: number
}

export interface UserGroupProviderResponse {
  id: string
  group_id: string
  provider_id: string
  assigned_at: string
  provider: Provider
  group: UserGroup
}

export interface UserHello {
  name: string
}

export interface UserListResponse {
  users: User[]
  total: number
  page: number
  per_page: number
}

export interface UserRegistrationStatusResponse {
  enabled: boolean
}

export interface UserServices {
  password?: PasswordService
}

export interface UserSetting {
  id: string
  user_id: string
  key: string
  value: any
  created_at: string
  updated_at: string
}

export interface UserSettingRequest {
  key: string
  value: any
}

export interface UserSettingsDeletionResponse {
  deleted: number
}

export interface UserSettingsResponse {
  settings: UserSetting[]
}

// =============================================================================
// API ENDPOINTS
// =============================================================================

// API endpoint definitions
export const ApiEndpoints = {
  'Admin.addApiProxyServerTrustedHost': 'POST /api/admin/api-proxy-server/trusted-hosts',
  'Admin.addDatabaseToRAGProvider': 'POST /api/admin/rag-providers/{provider_id}/databases',
  'Admin.addModelToApiProxyServer': 'POST /api/admin/api-proxy-server/models',
  'Admin.addModelToProvider': 'POST /api/admin/providers/{provider_id}/models',
  'Admin.assignProviderToGroup': 'POST /api/admin/groups/assign-provider',
  'Admin.assignUserToGroup': 'POST /api/admin/groups/assign',
  'Admin.cancelDownload': 'POST /api/admin/downloads/{download_id}/cancel',
  'Admin.cloneRAGProvider': 'POST /api/admin/rag-providers/{provider_id}/clone',
  'Admin.createAssistant': 'POST /api/admin/assistants',
  'Admin.createGroup': 'POST /api/admin/groups',
  'Admin.createProvider': 'POST /api/admin/providers',
  'Admin.createRAGProvider': 'POST /api/admin/rag-providers',
  'Admin.createRAGRepository': 'POST /api/admin/rag-repositories',
  'Admin.createRepository': 'POST /api/admin/repositories',
  'Admin.createUser': 'POST /api/admin/users',
  'Admin.deleteAssistant': 'DELETE /api/admin/assistants/{assistant_id}',
  'Admin.deleteDownload': 'DELETE /api/admin/downloads/{download_id}',
  'Admin.deleteGroup': 'DELETE /api/admin/groups/{group_id}',
  'Admin.deleteModel': 'DELETE /api/admin/models/{model_id}',
  'Admin.deleteProvider': 'DELETE /api/admin/providers/{provider_id}',
  'Admin.deleteRAGDatabase': 'DELETE /api/admin/rag-databases/{database_id}',
  'Admin.deleteRAGProvider': 'DELETE /api/admin/rag-providers/{provider_id}',
  'Admin.deleteRAGRepository': 'DELETE /api/admin/rag-repositories/{repository_id}',
  'Admin.deleteRepository': 'DELETE /api/admin/repositories/{repository_id}',
  'Admin.deleteUser': 'DELETE /api/admin/users/{user_id}',
  'Admin.disableModel': 'POST /api/admin/models/{model_id}/disable',
  'Admin.disableRAGDatabase': 'POST /api/admin/rag-databases/{database_id}/disable',
  'Admin.downloadFromRepository': 'POST /api/admin/models/initiate-repository-download',
  'Admin.downloadRAGDatabaseFromRepository': 'POST /api/admin/rag-repositories/download-database',
  'Admin.enableModel': 'POST /api/admin/models/{model_id}/enable',
  'Admin.enableRAGDatabase': 'POST /api/admin/rag-databases/{database_id}/enable',
  'Admin.getApiProxyServerConfig': 'GET /api/admin/api-proxy-server/config',
  'Admin.getApiProxyServerStatus': 'GET /api/admin/api-proxy-server/status',
  'Admin.getAssistant': 'GET /api/admin/assistants/{assistant_id}',
  'Admin.getAvailableDevices': 'GET /api/admin/devices',
  'Admin.getDefaultLanguage': 'GET /api/admin/config/default-language',
  'Admin.getDownload': 'GET /api/admin/downloads/{download_id}',
  'Admin.getGroup': 'GET /api/admin/groups/{group_id}',
  'Admin.getGroupMembers': 'GET /api/admin/groups/{group_id}/members',
  'Admin.getGroupProviders': 'GET /api/admin/groups/{group_id}/providers',
  'Admin.getHardwareInfo': 'GET /api/admin/hardware',
  'Admin.getModel': 'GET /api/admin/models/{model_id}',
  'Admin.getNgrokSettings': 'GET /api/admin/config/ngrok',
  'Admin.getNgrokStatus': 'GET /api/admin/config/ngrok/status',
  'Admin.getProvider': 'GET /api/admin/providers/{provider_id}',
  'Admin.getProviderGroups': 'GET /api/admin/providers/{provider_id}/groups',
  'Admin.getProxySettings': 'GET /api/admin/config/proxy',
  'Admin.getRAGDatabase': 'GET /api/admin/rag-databases/{database_id}',
  'Admin.getRAGProvider': 'GET /api/admin/rag-providers/{provider_id}',
  'Admin.getRAGRepository': 'GET /api/admin/rag-repositories/{repository_id}',
  'Admin.getRepository': 'GET /api/admin/repositories/{repository_id}',
  'Admin.getUser': 'GET /api/admin/users/{user_id}',
  'Admin.getUserRegistrationStatus': 'GET /api/admin/config/user-registration',
  'Admin.listAllDownloads': 'GET /api/admin/downloads',
  'Admin.listApiProxyServerModels': 'GET /api/admin/api-proxy-server/models',
  'Admin.listApiProxyServerTrustedHosts': 'GET /api/admin/api-proxy-server/trusted-hosts',
  'Admin.listAssistants': 'GET /api/admin/assistants',
  'Admin.listEngines': 'GET /api/admin/engines',
  'Admin.listGroups': 'GET /api/admin/groups',
  'Admin.listProviderModels': 'GET /api/admin/providers/{provider_id}/models',
  'Admin.listProviders': 'GET /api/admin/providers',
  'Admin.listRAGProviderDatabases': 'GET /api/admin/rag-providers/{provider_id}/databases',
  'Admin.listRAGProviders': 'GET /api/admin/rag-providers',
  'Admin.listRAGRepositories': 'GET /api/admin/rag-repositories',
  'Admin.listRAGRepositoryDatabases': 'GET /api/admin/rag-repositories/{repository_id}/databases',
  'Admin.listRepositories': 'GET /api/admin/repositories',
  'Admin.listUserGroupProviderRelationships': 'GET /api/admin/user-group-provider-relationships',
  'Admin.listUsers': 'GET /api/admin/users',
  'Admin.reloadApiProxyServerModels': 'POST /api/admin/api-proxy-server/reload/models',
  'Admin.reloadApiProxyServerTrustedHosts': 'POST /api/admin/api-proxy-server/reload/trusted-hosts',
  'Admin.removeApiProxyServerTrustedHost': 'DELETE /api/admin/api-proxy-server/trusted-hosts/{host_id}',
  'Admin.removeModelFromApiProxyServer': 'DELETE /api/admin/api-proxy-server/models/{model_id}',
  'Admin.removeProviderFromGroup': 'DELETE /api/admin/groups/{group_id}/providers/{provider_id}',
  'Admin.removeUserFromGroup': 'DELETE /api/admin/groups/{user_id}/{group_id}/remove',
  'Admin.resetUserPassword': 'POST /api/admin/users/reset-password',
  'Admin.startApiProxyServer': 'POST /api/admin/api-proxy-server/start',
  'Admin.startModel': 'POST /api/admin/models/{model_id}/start',
  'Admin.startNgrokTunnel': 'POST /api/admin/config/ngrok/start',
  'Admin.startRAGDatabase': 'POST /api/admin/rag-databases/{database_id}/start',
  'Admin.stopApiProxyServer': 'POST /api/admin/api-proxy-server/stop',
  'Admin.stopModel': 'POST /api/admin/models/{model_id}/stop',
  'Admin.stopNgrokTunnel': 'POST /api/admin/config/ngrok/stop',
  'Admin.stopRAGDatabase': 'POST /api/admin/rag-databases/{database_id}/stop',
  'Admin.subscribeApiProxyServerLogs': 'GET /api/admin/api-proxy-server/logs/stream',
  'Admin.subscribeDownloadProgress': 'GET /api/admin/downloads/subscribe',
  'Admin.subscribeHardwareUsage': 'GET /api/admin/hardware/usage-stream',
  'Admin.testRAGRepositoryConnection': 'POST /api/admin/rag-repositories/{repository_id}/test-connection',
  'Admin.testRepositoryConnection': 'POST /api/admin/repositories/test',
  'Admin.toggleUserActive': 'POST /api/admin/users/{user_id}/toggle-active',
  'Admin.updateApiProxyServerConfig': 'PUT /api/admin/api-proxy-server/config',
  'Admin.updateApiProxyServerModel': 'PUT /api/admin/api-proxy-server/models/{model_id}',
  'Admin.updateApiProxyServerTrustedHost': 'PUT /api/admin/api-proxy-server/trusted-hosts/{host_id}',
  'Admin.updateAssistant': 'PUT /api/admin/assistants/{assistant_id}',
  'Admin.updateDefaultLanguage': 'PUT /api/admin/config/default-language',
  'Admin.updateGroup': 'PUT /api/admin/groups/{group_id}',
  'Admin.updateModel': 'PUT /api/admin/models/{model_id}',
  'Admin.updateNgrokSettings': 'PUT /api/admin/config/ngrok',
  'Admin.updateProvider': 'PUT /api/admin/providers/{provider_id}',
  'Admin.updateProxySettings': 'PUT /api/admin/config/proxy',
  'Admin.updateRAGDatabase': 'PUT /api/admin/rag-databases/{database_id}',
  'Admin.updateRAGProvider': 'PUT /api/admin/rag-providers/{provider_id}',
  'Admin.updateRAGRepository': 'PUT /api/admin/rag-repositories/{repository_id}',
  'Admin.updateRepository': 'PUT /api/admin/repositories/{repository_id}',
  'Admin.updateUser': 'PUT /api/admin/users/{user_id}',
  'Admin.updateUserRegistrationStatus': 'PUT /api/admin/config/user-registration',
  'Admin.uploadAndCommitModel': 'POST /api/admin/uploaded-models/upload-and-commit',
  'Assistants.createAssistant': 'POST /api/assistants',
  'Assistants.deleteAssistant': 'DELETE /api/assistants/{assistant_id}',
  'Assistants.getAssistant': 'GET /api/assistants/{assistant_id}',
  'Assistants.getDefaultAssistant': 'GET /api/assistants/default',
  'Assistants.listAssistants': 'GET /api/assistants',
  'Assistants.updateAssistant': 'PUT /api/assistants/{assistant_id}',
  'Auth.init': 'GET /api/auth/init',
  'Auth.login': 'POST /api/auth/login',
  'Auth.logout': 'POST /api/auth/logout',
  'Auth.me': 'GET /api/auth/me',
  'Auth.register': 'POST /api/auth/register',
  'Auth.setup': 'POST /api/auth/setup',
  'Chat.createConversation': 'POST /api/chat/conversations',
  'Chat.deleteConversation': 'DELETE /api/chat/conversations/{conversation_id}',
  'Chat.editMessageStream': 'PUT /api/chat/messages/{message_id}/stream',
  'Chat.getConversation': 'GET /api/chat/conversations/{conversation_id}',
  'Chat.getConversationMessagesByBranch': 'GET /api/chat/conversations/{conversation_id}/messages/{branch_id}',
  'Chat.getMessageBranches': 'GET /api/chat/messages/{message_id}/branches',
  'Chat.listConversations': 'GET /api/chat/conversations',
  'Chat.searchConversations': 'GET /api/chat/conversations/search',
  'Chat.sendMessageStream': 'POST /api/chat/messages/stream',
  'Chat.switchConversationBranch': 'PUT /api/chat/conversations/{conversation_id}/branch/switch',
  'Chat.updateConversation': 'PUT /api/chat/conversations/{conversation_id}',
  'Config.getDefaultLanguage': 'GET /api/config/default-language',
  'Config.getUserRegistrationStatus': 'GET /api/config/user-registration',
  'Files.deleteFile': 'DELETE /api/files/{file_id}',
  'Files.downloadFile': 'GET /api/files/{file_id}/download',
  'Files.downloadFileWithToken': 'GET /api/files/{file_id}/download-with-token',
  'Files.generateDownloadToken': 'POST /api/files/{file_id}/download-token',
  'Files.getFile': 'GET /api/files/{file_id}',
  'Files.getFilePreview': 'GET /api/files/{file_id}/preview',
  'Files.listMessageFiles': 'GET /api/messages/{message_id}/files',
  'Files.listProjectFiles': 'GET /api/projects/{project_id}/files',
  'Files.removeFileFromMessage': 'DELETE /api/files/{file_id}/messages/{message_id}',
  'Files.uploadFile': 'POST /api/files/upload',
  'Files.uploadProjectFile': 'POST /api/projects/{project_id}/files',
  'Hub.getHubAssistants': 'GET /api/hub/assistants',
  'Hub.getHubModels': 'GET /api/hub/models',
  'Hub.getHubVersion': 'GET /api/hub/version',
  'Hub.refreshHubData': 'POST /api/hub/refresh',
  'Models.listEnabledProviderModels': 'GET /api/providers/{provider_id}/models',
  'Projects.createProject': 'POST /api/projects',
  'Projects.deleteProject': 'DELETE /api/projects/{project_id}',
  'Projects.getProject': 'GET /api/projects/{project_id}',
  'Projects.listProjects': 'GET /api/projects',
  'Projects.updateProject': 'PUT /api/projects/{project_id}',
  'Providers.listEnabledProviders': 'GET /api/providers',
  'User.greet': 'POST /api/user/greet',
  'User.updateAccountPassword': 'PUT /api/admin/config/user/password',
  'UserSettings.deleteAllUserSettings': 'DELETE /api/user/settings/all',
  'UserSettings.deleteUserSetting': 'DELETE /api/user/settings/{key}',
  'UserSettings.getUserSetting': 'GET /api/user/settings/{key}',
  'UserSettings.getUserSettings': 'GET /api/user/settings',
  'UserSettings.setUserSetting': 'POST /api/user/settings',
  'Utils.testProxy': 'POST /api/utils/test-proxy'
} as const

// API endpoint parameters
export type ApiEndpointParameters = {
  'Admin.addApiProxyServerTrustedHost': CreateTrustedHostRequest
  'Admin.addDatabaseToRAGProvider': { provider_id: string } & CreateRAGDatabaseRequest
  'Admin.addModelToApiProxyServer': CreateApiProxyServerModelRequest
  'Admin.addModelToProvider': { provider_id: string } & CreateModelRequest
  'Admin.assignProviderToGroup': AssignProviderToGroupRequest
  'Admin.assignUserToGroup': AssignUserToGroupRequest
  'Admin.cancelDownload': { download_id: string }
  'Admin.cloneRAGProvider': { provider_id: string }
  'Admin.createAssistant': CreateAssistantRequest
  'Admin.createGroup': CreateUserGroupRequest
  'Admin.createProvider': CreateProviderRequest
  'Admin.createRAGProvider': CreateRAGProviderRequest
  'Admin.createRAGRepository': CreateRAGRepositoryRequest
  'Admin.createRepository': CreateRepositoryRequest
  'Admin.createUser': CreateUserRequest
  'Admin.deleteAssistant': { assistant_id: string }
  'Admin.deleteDownload': { download_id: string }
  'Admin.deleteGroup': { group_id: string }
  'Admin.deleteModel': { model_id: string }
  'Admin.deleteProvider': { provider_id: string }
  'Admin.deleteRAGDatabase': { database_id: string }
  'Admin.deleteRAGProvider': { provider_id: string }
  'Admin.deleteRAGRepository': { repository_id: string }
  'Admin.deleteRepository': { repository_id: string }
  'Admin.deleteUser': { user_id: string }
  'Admin.disableModel': { model_id: string }
  'Admin.disableRAGDatabase': { database_id: string }
  'Admin.downloadFromRepository': DownloadFromRepositoryRequest
  'Admin.downloadRAGDatabaseFromRepository': DownloadRAGDatabaseFromRepositoryRequest
  'Admin.enableModel': { model_id: string }
  'Admin.enableRAGDatabase': { database_id: string }
  'Admin.getApiProxyServerConfig': void
  'Admin.getApiProxyServerStatus': void
  'Admin.getAssistant': { assistant_id: string }
  'Admin.getAvailableDevices': void
  'Admin.getDefaultLanguage': void
  'Admin.getDownload': { download_id: string }
  'Admin.getGroup': { group_id: string }
  'Admin.getGroupMembers': { group_id: string } & PaginationQuery
  'Admin.getGroupProviders': { group_id: string }
  'Admin.getHardwareInfo': void
  'Admin.getModel': { model_id: string }
  'Admin.getNgrokSettings': void
  'Admin.getNgrokStatus': void
  'Admin.getProvider': { provider_id: string }
  'Admin.getProviderGroups': { provider_id: string }
  'Admin.getProxySettings': void
  'Admin.getRAGDatabase': { database_id: string }
  'Admin.getRAGProvider': { provider_id: string }
  'Admin.getRAGRepository': { repository_id: string }
  'Admin.getRepository': { repository_id: string }
  'Admin.getUser': { user_id: string }
  'Admin.getUserRegistrationStatus': void
  'Admin.listAllDownloads': DownloadPaginationQuery
  'Admin.listApiProxyServerModels': void
  'Admin.listApiProxyServerTrustedHosts': void
  'Admin.listAssistants': PaginationQuery
  'Admin.listEngines': void
  'Admin.listGroups': PaginationQuery
  'Admin.listProviderModels': { provider_id: string }
  'Admin.listProviders': PaginationQuery
  'Admin.listRAGProviderDatabases': { provider_id: string }
  'Admin.listRAGProviders': PaginationQuery
  'Admin.listRAGRepositories': PaginationQuery
  'Admin.listRAGRepositoryDatabases': { repository_id: string }
  'Admin.listRepositories': PaginationQuery
  'Admin.listUserGroupProviderRelationships': void
  'Admin.listUsers': PaginationQuery
  'Admin.reloadApiProxyServerModels': void
  'Admin.reloadApiProxyServerTrustedHosts': void
  'Admin.removeApiProxyServerTrustedHost': { host_id: string }
  'Admin.removeModelFromApiProxyServer': { model_id: string }
  'Admin.removeProviderFromGroup': { group_id: string; provider_id: string }
  'Admin.removeUserFromGroup': { user_id: string; group_id: string }
  'Admin.resetUserPassword': ResetPasswordRequest
  'Admin.startApiProxyServer': void
  'Admin.startModel': { model_id: string }
  'Admin.startNgrokTunnel': void
  'Admin.startRAGDatabase': { database_id: string }
  'Admin.stopApiProxyServer': void
  'Admin.stopModel': { model_id: string }
  'Admin.stopNgrokTunnel': void
  'Admin.stopRAGDatabase': { database_id: string }
  'Admin.subscribeApiProxyServerLogs': void
  'Admin.subscribeDownloadProgress': void
  'Admin.subscribeHardwareUsage': void
  'Admin.testRAGRepositoryConnection': { repository_id: string }
  'Admin.testRepositoryConnection': TestRepositoryConnectionRequest
  'Admin.toggleUserActive': { user_id: string }
  'Admin.updateApiProxyServerConfig': ApiProxyServerConfig
  'Admin.updateApiProxyServerModel': { model_id: string } & UpdateApiProxyServerModelRequest
  'Admin.updateApiProxyServerTrustedHost': { host_id: string } & UpdateTrustedHostRequest
  'Admin.updateAssistant': { assistant_id: string } & UpdateAssistantRequest
  'Admin.updateDefaultLanguage': UpdateDefaultLanguageRequest
  'Admin.updateGroup': { group_id: string } & UpdateUserGroupRequest
  'Admin.updateModel': { model_id: string } & UpdateModelRequest
  'Admin.updateNgrokSettings': UpdateNgrokSettingsRequest
  'Admin.updateProvider': { provider_id: string } & UpdateProviderRequest
  'Admin.updateProxySettings': UpdateProxySettingsRequest
  'Admin.updateRAGDatabase': { database_id: string } & UpdateRAGDatabaseRequest
  'Admin.updateRAGProvider': { provider_id: string } & UpdateRAGProviderRequest
  'Admin.updateRAGRepository': { repository_id: string } & UpdateRAGRepositoryRequest
  'Admin.updateRepository': { repository_id: string } & UpdateRepositoryRequest
  'Admin.updateUser': { user_id: string } & UpdateUserRequest
  'Admin.updateUserRegistrationStatus': UpdateUserRegistrationRequest
  'Admin.uploadAndCommitModel': FormData
  'Assistants.createAssistant': CreateAssistantRequest
  'Assistants.deleteAssistant': { assistant_id: string }
  'Assistants.getAssistant': { assistant_id: string }
  'Assistants.getDefaultAssistant': void
  'Assistants.listAssistants': PaginationQuery
  'Assistants.updateAssistant': { assistant_id: string } & UpdateAssistantRequest
  'Auth.init': void
  'Auth.login': LoginRequest
  'Auth.logout': void
  'Auth.me': void
  'Auth.register': CreateUserRequest
  'Auth.setup': CreateUserRequest
  'Chat.createConversation': CreateConversationRequest
  'Chat.deleteConversation': { conversation_id: string }
  'Chat.editMessageStream': { message_id: string } & ChatMessageRequest
  'Chat.getConversation': { conversation_id: string }
  'Chat.getConversationMessagesByBranch': { conversation_id: string; branch_id: string }
  'Chat.getMessageBranches': { message_id: string }
  'Chat.listConversations': ConversationPaginationQuery
  'Chat.searchConversations': SearchQuery
  'Chat.sendMessageStream': ChatMessageRequest
  'Chat.switchConversationBranch': { conversation_id: string } & SwitchBranchRequest
  'Chat.updateConversation': { conversation_id: string } & UpdateConversationRequest
  'Config.getDefaultLanguage': void
  'Config.getUserRegistrationStatus': void
  'Files.deleteFile': { file_id: string }
  'Files.downloadFile': { file_id: string }
  'Files.downloadFileWithToken': { file_id: string; token?: string }
  'Files.generateDownloadToken': { file_id: string }
  'Files.getFile': { file_id: string }
  'Files.getFilePreview': { file_id: string; page?: number }
  'Files.listMessageFiles': { message_id: string }
  'Files.listProjectFiles': { project_id: string } & ProjectListQuery
  'Files.removeFileFromMessage': { file_id: string; message_id: string }
  'Files.uploadFile': FormData
  'Files.uploadProjectFile': { project_id: string } & FormData
  'Hub.getHubAssistants': HubQueryParams
  'Hub.getHubModels': HubQueryParams
  'Hub.getHubVersion': void
  'Hub.refreshHubData': HubQueryParams
  'Models.listEnabledProviderModels': { provider_id: string }
  'Projects.createProject': CreateProjectRequest
  'Projects.deleteProject': { project_id: string }
  'Projects.getProject': { project_id: string }
  'Projects.listProjects': ProjectListQuery
  'Projects.updateProject': { project_id: string } & UpdateProjectRequest
  'Providers.listEnabledProviders': PaginationQuery
  'User.greet': UserHello
  'User.updateAccountPassword': UpdateUserPasswordRequest
  'UserSettings.deleteAllUserSettings': void
  'UserSettings.deleteUserSetting': { key: string }
  'UserSettings.getUserSetting': { key: string }
  'UserSettings.getUserSettings': void
  'UserSettings.setUserSetting': UserSettingRequest
  'Utils.testProxy': TestProxyConnectionRequest
}

// API endpoint responses
export type ApiEndpointResponses = {
  'Admin.addApiProxyServerTrustedHost': ApiProxyServerTrustedHost
  'Admin.addDatabaseToRAGProvider': RAGDatabase
  'Admin.addModelToApiProxyServer': ApiProxyServerModel
  'Admin.addModelToProvider': Model
  'Admin.assignProviderToGroup': UserGroupProviderResponse
  'Admin.assignUserToGroup': void
  'Admin.cancelDownload': void
  'Admin.cloneRAGProvider': RAGProvider
  'Admin.createAssistant': Assistant
  'Admin.createGroup': UserGroup
  'Admin.createProvider': Provider
  'Admin.createRAGProvider': RAGProvider
  'Admin.createRAGRepository': RAGRepository
  'Admin.createRepository': Repository
  'Admin.createUser': User
  'Admin.deleteAssistant': void
  'Admin.deleteDownload': void
  'Admin.deleteGroup': void
  'Admin.deleteModel': void
  'Admin.deleteProvider': void
  'Admin.deleteRAGDatabase': void
  'Admin.deleteRAGProvider': void
  'Admin.deleteRAGRepository': void
  'Admin.deleteRepository': void
  'Admin.deleteUser': void
  'Admin.disableModel': void
  'Admin.disableRAGDatabase': void
  'Admin.downloadFromRepository': DownloadInstance
  'Admin.downloadRAGDatabaseFromRepository': RAGDatabase
  'Admin.enableModel': void
  'Admin.enableRAGDatabase': void
  'Admin.getApiProxyServerConfig': ApiProxyServerConfig
  'Admin.getApiProxyServerStatus': ApiProxyServerStatus
  'Admin.getAssistant': Assistant
  'Admin.getAvailableDevices': AvailableDevicesResponse
  'Admin.getDefaultLanguage': DefaultLanguageResponse
  'Admin.getDownload': DownloadInstance
  'Admin.getGroup': UserGroup
  'Admin.getGroupMembers': UserListResponse
  'Admin.getGroupProviders': Provider[]
  'Admin.getHardwareInfo': HardwareInfoResponse
  'Admin.getModel': Model
  'Admin.getNgrokSettings': NgrokSettingsResponse
  'Admin.getNgrokStatus': NgrokStatusResponse
  'Admin.getProvider': Provider
  'Admin.getProviderGroups': UserGroup[]
  'Admin.getProxySettings': ProxySettingsResponse
  'Admin.getRAGDatabase': RAGDatabase
  'Admin.getRAGProvider': RAGProvider
  'Admin.getRAGRepository': RAGRepository
  'Admin.getRepository': Repository
  'Admin.getUser': User
  'Admin.getUserRegistrationStatus': UserRegistrationStatusResponse
  'Admin.listAllDownloads': DownloadInstanceListResponse
  'Admin.listApiProxyServerModels': ApiProxyServerModel[]
  'Admin.listApiProxyServerTrustedHosts': ApiProxyServerTrustedHost[]
  'Admin.listAssistants': AssistantListResponse
  'Admin.listEngines': EngineInfo[]
  'Admin.listGroups': UserGroupListResponse
  'Admin.listProviderModels': Model[]
  'Admin.listProviders': ProviderListResponse
  'Admin.listRAGProviderDatabases': RAGDatabase[]
  'Admin.listRAGProviders': RAGProviderListResponse
  'Admin.listRAGRepositories': RAGRepositoryListResponse
  'Admin.listRAGRepositoryDatabases': RAGDatabase[]
  'Admin.listRepositories': RepositoryListResponse
  'Admin.listUserGroupProviderRelationships': UserGroupProviderResponse[]
  'Admin.listUsers': UserListResponse
  'Admin.reloadApiProxyServerModels': void
  'Admin.reloadApiProxyServerTrustedHosts': void
  'Admin.removeApiProxyServerTrustedHost': void
  'Admin.removeModelFromApiProxyServer': void
  'Admin.removeProviderFromGroup': void
  'Admin.removeUserFromGroup': void
  'Admin.resetUserPassword': void
  'Admin.startApiProxyServer': void
  'Admin.startModel': void
  'Admin.startNgrokTunnel': NgrokStatusResponse
  'Admin.startRAGDatabase': void
  'Admin.stopApiProxyServer': void
  'Admin.stopModel': void
  'Admin.stopNgrokTunnel': NgrokStatusResponse
  'Admin.stopRAGDatabase': void
  'Admin.subscribeApiProxyServerLogs': void
  'Admin.subscribeDownloadProgress': void
  'Admin.subscribeHardwareUsage': void
  'Admin.testRAGRepositoryConnection': RAGRepositoryConnectionTestResponse
  'Admin.testRepositoryConnection': TestRepositoryConnectionResponse
  'Admin.toggleUserActive': UserActiveStatusResponse
  'Admin.updateApiProxyServerConfig': ApiProxyServerConfig
  'Admin.updateApiProxyServerModel': ApiProxyServerModel
  'Admin.updateApiProxyServerTrustedHost': ApiProxyServerTrustedHost
  'Admin.updateAssistant': Assistant
  'Admin.updateDefaultLanguage': DefaultLanguageResponse
  'Admin.updateGroup': UserGroup
  'Admin.updateModel': Model
  'Admin.updateNgrokSettings': NgrokSettingsResponse
  'Admin.updateProvider': Provider
  'Admin.updateProxySettings': ProxySettingsResponse
  'Admin.updateRAGDatabase': RAGDatabase
  'Admin.updateRAGProvider': RAGProvider
  'Admin.updateRAGRepository': RAGRepository
  'Admin.updateRepository': Repository
  'Admin.updateUser': User
  'Admin.updateUserRegistrationStatus': UserRegistrationStatusResponse
  'Admin.uploadAndCommitModel': Model
  'Assistants.createAssistant': Assistant
  'Assistants.deleteAssistant': void
  'Assistants.getAssistant': Assistant
  'Assistants.getDefaultAssistant': Assistant
  'Assistants.listAssistants': AssistantListResponse
  'Assistants.updateAssistant': Assistant
  'Auth.init': InitResponse
  'Auth.login': AuthResponse
  'Auth.logout': void
  'Auth.me': User
  'Auth.register': AuthResponse
  'Auth.setup': AuthResponse
  'Chat.createConversation': Conversation
  'Chat.deleteConversation': void
  'Chat.editMessageStream': void
  'Chat.getConversation': Conversation
  'Chat.getConversationMessagesByBranch': Message[]
  'Chat.getMessageBranches': MessageBranch[]
  'Chat.listConversations': ConversationListResponse
  'Chat.searchConversations': ConversationListResponse
  'Chat.sendMessageStream': void
  'Chat.switchConversationBranch': OperationSuccessResponse
  'Chat.updateConversation': Conversation
  'Config.getDefaultLanguage': DefaultLanguageResponse
  'Config.getUserRegistrationStatus': UserRegistrationStatusResponse
  'Files.deleteFile': FileOperationSuccessResponse
  'Files.downloadFile': Blob
  'Files.downloadFileWithToken': Blob
  'Files.generateDownloadToken': DownloadTokenResponse
  'Files.getFile': File
  'Files.getFilePreview': Blob
  'Files.listMessageFiles': File[]
  'Files.listProjectFiles': FileListResponse
  'Files.removeFileFromMessage': FileOperationSuccessResponse
  'Files.uploadFile': UploadFileResponse
  'Files.uploadProjectFile': UploadFileResponse
  'Hub.getHubAssistants': HubAssistant[]
  'Hub.getHubModels': HubModel[]
  'Hub.getHubVersion': HubVersionResponse
  'Hub.refreshHubData': void
  'Models.listEnabledProviderModels': Model[]
  'Projects.createProject': Project
  'Projects.deleteProject': void
  'Projects.getProject': ProjectDetailResponse
  'Projects.listProjects': ProjectListResponse
  'Projects.updateProject': Project
  'Providers.listEnabledProviders': ProviderListResponse
  'User.greet': string
  'User.updateAccountPassword': void
  'UserSettings.deleteAllUserSettings': UserSettingsDeletionResponse
  'UserSettings.deleteUserSetting': void
  'UserSettings.getUserSetting': UserSetting
  'UserSettings.getUserSettings': UserSettingsResponse
  'UserSettings.setUserSetting': UserSetting
  'Utils.testProxy': TestProxyConnectionResponse
}

// Type helpers
export type ApiEndpoint = keyof typeof ApiEndpoints
export type ApiEndpointUrl = (typeof ApiEndpoints)[ApiEndpoint]

// Extract endpoint key from URL pattern
export function getEndpointKey(url: string): ApiEndpoint | undefined {
  const entries = Object.entries(ApiEndpoints) as [ApiEndpoint, string][]
  const found = entries.find(([_key, value]) => value === url)
  return found ? found[0] : undefined
}

// Get parameter type for endpoint
export type GetParameterType<K extends ApiEndpoint> = ApiEndpointParameters[K]

// Get response type for endpoint  
export type GetResponseType<K extends ApiEndpoint> = ApiEndpointResponses[K]

// Create reverse mapping from URL to endpoint key
export type UrlToEndpoint<U extends ApiEndpointUrl> = {
  [K in keyof typeof ApiEndpoints]: (typeof ApiEndpoints)[K] extends U
    ? K
    : never
}[keyof typeof ApiEndpoints]

// Helper types to get parameter and response types by URL
export type ParameterByUrl<U extends ApiEndpointUrl> =
  ApiEndpointParameters[UrlToEndpoint<U>]
export type ResponseByUrl<U extends ApiEndpointUrl> =
  ApiEndpointResponses[UrlToEndpoint<U>]

// Type-safe validation - this will cause a TypeScript error if any endpoint is missing
type ValidateParametersComplete = {
  [K in keyof typeof ApiEndpoints]: K extends keyof ApiEndpointParameters
    ? true
    : false
}

type ValidateResponsesComplete = {
  [K in keyof typeof ApiEndpoints]: K extends keyof ApiEndpointResponses
    ? true
    : false
}

// Type-safe validation - these will cause a TypeScript error if any endpoint is missing
// from Parameters or Responses. They are used for compile-time validation only.
export type { ValidateParametersComplete, ValidateResponsesComplete }
