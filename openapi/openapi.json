{
  "openapi": "3.1.0",
  "info": {
    "title": "",
    "version": ""
  },
  "paths": {
    "/api/auth/init": {
      "get": {
        "tags": [
          "auth"
        ],
        "description": "Check if the application is initialized",
        "operationId": "Auth.init",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InitResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/setup": {
      "post": {
        "tags": [
          "auth"
        ],
        "description": "Initialize the application with root user",
        "operationId": "Auth.setup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "description": "Login user and return JWT token",
        "operationId": "Auth.login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "tags": [
          "auth"
        ],
        "description": "Register new user account",
        "operationId": "Auth.register",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/types-permissions": {
      "get": {
        "description": "Types for open api generation",
        "responses": {
          "600": {
            "description": "AWS-style permissions for fine-grained access control",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Permission"
                }
              }
            }
          }
        }
      }
    },
    "/api/config/user-registration": {
      "get": {
        "tags": [
          "config"
        ],
        "description": "Get user registration status",
        "operationId": "Config.getUserRegistrationStatus",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRegistrationStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/config/default-language": {
      "get": {
        "tags": [
          "config"
        ],
        "description": "Get default language",
        "operationId": "Config.getDefaultLanguage",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultLanguageResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/utils/test-proxy": {
      "post": {
        "tags": [
          "utils"
        ],
        "description": "Test the proxy connection",
        "operationId": "Utils.testProxy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestProxyConnectionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestProxyConnectionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "auth"
        ],
        "description": "Logout user and invalidate JWT token",
        "operationId": "Auth.logout",
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/auth/me": {
      "get": {
        "tags": [
          "auth"
        ],
        "description": "Get current user information",
        "operationId": "Auth.me",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/users": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "List all users (admin)",
        "operationId": "Admin.listUsers",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Create new user (admin)",
        "operationId": "Admin.createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/users/{user_id}": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Get user by ID (admin)",
        "operationId": "Admin.getUser",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "admin"
        ],
        "description": "Update user (admin)",
        "operationId": "Admin.updateUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "admin"
        ],
        "description": "Delete user (admin)",
        "operationId": "Admin.deleteUser",
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/admin/users/{user_id}/toggle-active": {
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Toggle user active status (admin)",
        "operationId": "Admin.toggleUserActive",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserActiveStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/users/reset-password": {
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Reset user password (admin)",
        "operationId": "Admin.resetUserPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/admin/groups": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "List all user groups (admin)",
        "operationId": "Admin.listGroups",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Create a new user group",
        "operationId": "Admin.createGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/groups/{group_id}": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Get a specific user group",
        "operationId": "Admin.getGroup",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "admin"
        ],
        "description": "Update a user group",
        "operationId": "Admin.updateGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "admin"
        ],
        "description": "Delete a user group",
        "operationId": "Admin.deleteGroup",
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/admin/groups/{group_id}/members": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Get members of a user group",
        "operationId": "Admin.getGroupMembers",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/groups/assign": {
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Assign a user to a group",
        "operationId": "Admin.assignUserToGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignUserToGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/admin/groups/{user_id}/{group_id}/remove": {
      "delete": {
        "tags": [
          "admin"
        ],
        "description": "Remove a user from a group",
        "operationId": "Admin.removeUserFromGroup",
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/admin/groups/{group_id}/providers": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Get providers assigned to a user group",
        "operationId": "Admin.getGroupProviders",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/groups/{group_id}/rag_providers": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Get RAG providers assigned to a user group",
        "operationId": "Admin.getGroupRagProviders",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RAGProviderListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/config/user-registration": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Get user registration status (admin)",
        "operationId": "Admin.getUserRegistrationStatus",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRegistrationStatusResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "admin"
        ],
        "description": "Update user registration status (admin)",
        "operationId": "Admin.updateUserRegistrationStatus",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRegistrationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRegistrationStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/config/default-language": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Get default language (admin)",
        "operationId": "Admin.getDefaultLanguage",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultLanguageResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "admin"
        ],
        "description": "Update default language (admin)",
        "operationId": "Admin.updateDefaultLanguage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDefaultLanguageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultLanguageResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/config/proxy": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Get proxy settings (admin)",
        "operationId": "Admin.getProxySettings",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxySettingsResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "admin"
        ],
        "description": "Update proxy settings (admin)",
        "operationId": "Admin.updateProxySettings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProxySettingsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxySettingsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/config/ngrok": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Get Ngrok settings (admin)",
        "operationId": "Admin.getNgrokSettings",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NgrokSettingsResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "admin"
        ],
        "description": "Update Ngrok settings (admin)",
        "operationId": "Admin.updateNgrokSettings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNgrokSettingsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NgrokSettingsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/config/ngrok/start": {
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Start Ngrok tunnel (admin)",
        "operationId": "Admin.startNgrokTunnel",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NgrokStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/config/ngrok/stop": {
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Stop Ngrok tunnel (admin)",
        "operationId": "Admin.stopNgrokTunnel",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NgrokStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/config/ngrok/status": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Get Ngrok status (admin)",
        "operationId": "Admin.getNgrokStatus",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NgrokStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/config/user/password": {
      "put": {
        "tags": [
          "admin"
        ],
        "description": "Update user account password",
        "operationId": "User.updateAccountPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/admin/providers": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "List all providers",
        "operationId": "Admin.listProviders",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Create a new provider",
        "operationId": "Admin.createProvider",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProviderRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Provider"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/providers/{provider_id}": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Get a specific provider",
        "operationId": "Admin.getProvider",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Provider"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "admin"
        ],
        "description": "Update a provider",
        "operationId": "Admin.updateProvider",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProviderRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Provider"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "admin"
        ],
        "description": "Delete a provider",
        "operationId": "Admin.deleteProvider",
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/admin/providers/{provider_id}/groups": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Get groups assigned to a provider",
        "operationId": "Admin.getProviderGroups",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserGroup"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/providers/{provider_id}/models": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "List models for a provider",
        "operationId": "Admin.listProviderModels",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Model"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Add a model to a provider",
        "operationId": "Admin.addModelToProvider",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateModelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Model"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/devices": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Get available devices",
        "operationId": "Admin.getAvailableDevices",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableDevicesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/models/{model_id}": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Get a specific model",
        "operationId": "Admin.getModel",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Model"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "admin"
        ],
        "description": "Update a model",
        "operationId": "Admin.updateModel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateModelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Model"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "admin"
        ],
        "description": "Delete a model",
        "operationId": "Admin.deleteModel",
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/admin/models/{model_id}/start": {
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Start a model",
        "operationId": "Admin.startModel",
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/admin/models/{model_id}/stop": {
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Stop a model",
        "operationId": "Admin.stopModel",
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/admin/models/{model_id}/enable": {
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Enable a model",
        "operationId": "Admin.enableModel",
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/admin/models/{model_id}/disable": {
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Disable a model",
        "operationId": "Admin.disableModel",
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/admin/uploaded-models/upload-and-commit": {
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Upload and commit model files",
        "operationId": "Admin.uploadAndCommitModel",
        "requestBody": {
          "description": "multipart form data",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Model"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/models/initiate-repository-download": {
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Initiate repository download",
        "operationId": "Admin.downloadFromRepository",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DownloadFromRepositoryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Main download instance struct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadInstance"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/repositories": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "List all repositories",
        "operationId": "Admin.listRepositories",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Create a new repository",
        "operationId": "Admin.createRepository",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRepositoryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Repository"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/repositories/{repository_id}": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Get a specific repository",
        "operationId": "Admin.getRepository",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Repository"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "admin"
        ],
        "description": "Update a repository",
        "operationId": "Admin.updateRepository",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRepositoryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Repository"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "admin"
        ],
        "description": "Delete a repository",
        "operationId": "Admin.deleteRepository",
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/admin/repositories/test": {
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Test repository connection",
        "operationId": "Admin.testRepositoryConnection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestRepositoryConnectionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestRepositoryConnectionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/rag/providers/{provider_id}/instances": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "List system RAG instances for provider",
        "operationId": "Admin.listSystemRagInstances",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RAGInstanceListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Create system RAG instance for provider",
        "operationId": "Admin.createSystemRagInstance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSystemRAGInstanceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RAGInstance"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/rag/instances/{instance_id}": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Get system RAG instance by ID",
        "operationId": "Admin.getSystemRagInstance",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RAGInstance"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "admin"
        ],
        "description": "Update system RAG instance",
        "operationId": "Admin.updateSystemRagInstance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRAGInstanceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RAGInstance"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "admin"
        ],
        "description": "Delete system RAG instance",
        "operationId": "Admin.deleteSystemRagInstance",
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/admin/rag/providers": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "List all RAG providers",
        "operationId": "Admin.listRagProviders",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RAGProviderListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Create new RAG provider",
        "operationId": "Admin.createRagProvider",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRAGProviderRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RAGProvider"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/rag/providers/{provider_id}": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Get RAG provider by ID",
        "operationId": "Admin.getRagProvider",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RAGProvider"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "admin"
        ],
        "description": "Update RAG provider",
        "operationId": "Admin.updateRagProvider",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRAGProviderRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RAGProvider"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "admin"
        ],
        "description": "Delete RAG provider",
        "operationId": "Admin.deleteRagProvider",
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/admin/rag/providers/{provider_id}/test": {
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Test RAG provider connection",
        "operationId": "Admin.testRagProvider",
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/admin/rag/repositories": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "List all RAG repositories",
        "operationId": "Admin.listRAGRepositories",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RAGRepositoryListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Create a new RAG repository",
        "operationId": "Admin.createRAGRepository",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRAGRepositoryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RAGRepository"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/rag/repositories/{repository_id}": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Get a specific RAG repository",
        "operationId": "Admin.getRAGRepository",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RAGRepository"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "admin"
        ],
        "description": "Update a RAG repository",
        "operationId": "Admin.updateRAGRepository",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRAGRepositoryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RAGRepository"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "admin"
        ],
        "description": "Delete a RAG repository",
        "operationId": "Admin.deleteRAGRepository",
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/admin/rag/repositories/{repository_id}/test-connection": {
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Test RAG repository connection",
        "operationId": "Admin.testRAGRepositoryConnection",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RAGRepositoryConnectionTestResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/assistants": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "List all assistants (admin)",
        "operationId": "Admin.listAssistants",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssistantListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Create new assistant template (admin)",
        "operationId": "Admin.createAssistant",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAssistantRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assistant"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/assistants/{assistant_id}": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Get assistant by ID (admin)",
        "operationId": "Admin.getAssistant",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assistant"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "admin"
        ],
        "description": "Update assistant (admin)",
        "operationId": "Admin.updateAssistant",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssistantRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assistant"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "admin"
        ],
        "description": "Delete assistant (admin)",
        "operationId": "Admin.deleteAssistant",
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/admin/downloads": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "List all download instances (admin)",
        "operationId": "Admin.listAllDownloads",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": [
                "string",
                "null"
              ]
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "Response for download instance list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadInstanceListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/downloads/{download_id}": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Get a specific download instance",
        "operationId": "Admin.getDownload",
        "responses": {
          "200": {
            "description": "Main download instance struct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadInstance"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "admin"
        ],
        "description": "Delete a download instance",
        "operationId": "Admin.deleteDownload",
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/admin/downloads/{download_id}/cancel": {
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Cancel a download",
        "operationId": "Admin.cancelDownload",
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/admin/downloads/subscribe": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Subscribe to download progress updates via SSE",
        "operationId": "Admin.subscribeDownloadProgress",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSEDownloadProgressEvent"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/downloads/types": {
      "get": {
        "description": "Types for open api generation",
        "responses": {
          "600": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadProgressUpdate"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/engines": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "List all available ML inference engines",
        "operationId": "Admin.listEngines",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EngineInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/hardware": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Get hardware information",
        "operationId": "Admin.getHardwareInfo",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HardwareInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/hardware/usage-stream": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Subscribe to hardware usage stream via SSE",
        "operationId": "Admin.subscribeHardwareUsage",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSEHardwareUsageEvent"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/hardware/types": {
      "get": {
        "description": "Types for open api generation",
        "responses": {
          "600": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HardwareUsageUpdate"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/api-proxy-server/config": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Get API proxy server configuration",
        "operationId": "Admin.getApiProxyServerConfig",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProxyServerConfig"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "admin"
        ],
        "description": "Update API proxy server configuration",
        "operationId": "Admin.updateApiProxyServerConfig",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProxyServerConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProxyServerConfig"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/api-proxy-server/models": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "List API proxy server models",
        "operationId": "Admin.listApiProxyServerModels",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiProxyServerModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Add model to API proxy server",
        "operationId": "Admin.addModelToApiProxyServer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApiProxyServerModelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProxyServerModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/api-proxy-server/models/{model_id}": {
      "put": {
        "tags": [
          "admin"
        ],
        "description": "Update API proxy server model",
        "operationId": "Admin.updateApiProxyServerModel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApiProxyServerModelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProxyServerModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "admin"
        ],
        "description": "Remove model from API proxy server",
        "operationId": "Admin.removeModelFromApiProxyServer",
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/admin/api-proxy-server/trusted-hosts": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "List API proxy server trusted hosts",
        "operationId": "Admin.listApiProxyServerTrustedHosts",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiProxyServerTrustedHost"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Add trusted host to API proxy server",
        "operationId": "Admin.addApiProxyServerTrustedHost",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTrustedHostRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProxyServerTrustedHost"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/api-proxy-server/trusted-hosts/{host_id}": {
      "put": {
        "tags": [
          "admin"
        ],
        "description": "Update API proxy server trusted host",
        "operationId": "Admin.updateApiProxyServerTrustedHost",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTrustedHostRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProxyServerTrustedHost"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "admin"
        ],
        "description": "Remove trusted host from API proxy server",
        "operationId": "Admin.removeApiProxyServerTrustedHost",
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/admin/api-proxy-server/status": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Get API proxy server status",
        "operationId": "Admin.getApiProxyServerStatus",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProxyServerStatus"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/api-proxy-server/start": {
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Start API proxy server",
        "operationId": "Admin.startApiProxyServer",
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/admin/api-proxy-server/stop": {
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Stop API proxy server",
        "operationId": "Admin.stopApiProxyServer",
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/admin/api-proxy-server/reload/models": {
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Reload API proxy server models",
        "operationId": "Admin.reloadApiProxyServerModels",
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/admin/api-proxy-server/reload/trusted-hosts": {
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Reload API proxy server trusted hosts",
        "operationId": "Admin.reloadApiProxyServerTrustedHosts",
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/admin/api-proxy-server/logs/stream": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Subscribe to API proxy server logs stream",
        "operationId": "Admin.subscribeApiProxyServerLogs",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSEProxyLogsEvent"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/greet": {
      "post": {
        "tags": [
          "user"
        ],
        "description": "User greeting endpoint",
        "operationId": "User.greet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserHello"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/settings": {
      "get": {
        "tags": [
          "user-settings"
        ],
        "description": "Get all user settings",
        "operationId": "UserSettings.getUserSettings",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSettingsResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user-settings"
        ],
        "description": "Set user setting",
        "operationId": "UserSettings.setUserSetting",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSettingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSetting"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/settings/{key}": {
      "get": {
        "tags": [
          "user-settings"
        ],
        "description": "Get specific user setting",
        "operationId": "UserSettings.getUserSetting",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSetting"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user-settings"
        ],
        "description": "Delete user setting",
        "operationId": "UserSettings.deleteUserSetting",
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/user/settings/all": {
      "delete": {
        "tags": [
          "user-settings"
        ],
        "description": "Delete all user settings",
        "operationId": "UserSettings.deleteAllUserSettings",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSettingsDeletionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/assistants": {
      "get": {
        "tags": [
          "assistants"
        ],
        "description": "List user assistants",
        "operationId": "Assistants.listAssistants",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssistantListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "assistants"
        ],
        "description": "Create new assistant",
        "operationId": "Assistants.createAssistant",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAssistantRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assistant"
                }
              }
            }
          }
        }
      }
    },
    "/api/assistants/{assistant_id}": {
      "get": {
        "tags": [
          "assistants"
        ],
        "description": "Get assistant by ID",
        "operationId": "Assistants.getAssistant",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assistant"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "assistants"
        ],
        "description": "Update assistant",
        "operationId": "Assistants.updateAssistant",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssistantRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assistant"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "assistants"
        ],
        "description": "Delete assistant",
        "operationId": "Assistants.deleteAssistant",
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/assistants/default": {
      "get": {
        "tags": [
          "assistants"
        ],
        "description": "Get default assistant",
        "operationId": "Assistants.getDefaultAssistant",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assistant"
                }
              }
            }
          }
        }
      }
    },
    "/api/providers": {
      "get": {
        "tags": [
          "providers"
        ],
        "description": "List enabled providers",
        "operationId": "Providers.listEnabledProviders",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/providers/{provider_id}/models": {
      "get": {
        "tags": [
          "models"
        ],
        "description": "List enabled models for provider",
        "operationId": "Models.listEnabledProviderModels",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Model"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/conversations": {
      "get": {
        "tags": [
          "chat"
        ],
        "description": "List user conversations",
        "operationId": "Chat.listConversations",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "project_id",
            "schema": {
              "type": [
                "string",
                "null"
              ]
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "chat"
        ],
        "description": "Create new conversation",
        "operationId": "Chat.createConversation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConversationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Conversation"
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/conversations/{conversation_id}": {
      "get": {
        "tags": [
          "chat"
        ],
        "description": "Get conversation by ID",
        "operationId": "Chat.getConversation",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Conversation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "chat"
        ],
        "description": "Update conversation",
        "operationId": "Chat.updateConversation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateConversationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Conversation"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "chat"
        ],
        "description": "Delete conversation",
        "operationId": "Chat.deleteConversation",
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/chat/messages/stream": {
      "post": {
        "tags": [
          "chat"
        ],
        "description": "Send message with streaming response",
        "operationId": "Chat.sendMessageStream",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatMessageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSEChatStreamEvent"
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/messages/{message_id}/stream": {
      "put": {
        "tags": [
          "chat"
        ],
        "description": "Edit message with streaming response",
        "operationId": "Chat.editMessageStream",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatMessageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSEChatStreamEvent"
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/messages/{message_id}/branches": {
      "get": {
        "tags": [
          "chat"
        ],
        "description": "Get message branches",
        "operationId": "Chat.getMessageBranches",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageBranch"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/conversations/{conversation_id}/branch/switch": {
      "put": {
        "tags": [
          "chat"
        ],
        "description": "Switch conversation branch",
        "operationId": "Chat.switchConversationBranch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SwitchBranchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/conversations/{conversation_id}/messages/{branch_id}": {
      "get": {
        "tags": [
          "chat"
        ],
        "description": "Get conversation messages by branch",
        "operationId": "Chat.getConversationMessagesByBranch",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Message"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/conversations/search": {
      "get": {
        "tags": [
          "chat"
        ],
        "description": "Search conversations",
        "operationId": "Chat.searchConversations",
        "parameters": [
          {
            "in": "query",
            "name": "q",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "project_id",
            "schema": {
              "type": [
                "string",
                "null"
              ]
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects": {
      "get": {
        "tags": [
          "projects"
        ],
        "description": "List user projects",
        "operationId": "Projects.listProjects",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": [
                "string",
                "null"
              ]
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "description": "Create new project",
        "operationId": "Projects.createProject",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{project_id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "description": "Get project by ID",
        "operationId": "Projects.getProject",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDetailResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "projects"
        ],
        "description": "Update project",
        "operationId": "Projects.updateProject",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "description": "Delete project",
        "operationId": "Projects.deleteProject",
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/hub/models": {
      "get": {
        "tags": [
          "hub"
        ],
        "description": "Get hub models with locale support",
        "operationId": "Hub.getHubModels",
        "parameters": [
          {
            "in": "query",
            "name": "lang",
            "schema": {
              "type": [
                "string",
                "null"
              ]
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HubModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/hub/assistants": {
      "get": {
        "tags": [
          "hub"
        ],
        "description": "Get hub assistants with locale support",
        "operationId": "Hub.getHubAssistants",
        "parameters": [
          {
            "in": "query",
            "name": "lang",
            "schema": {
              "type": [
                "string",
                "null"
              ]
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HubAssistant"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/hub/refresh": {
      "post": {
        "tags": [
          "hub"
        ],
        "description": "Refresh hub data from remote source",
        "operationId": "Hub.refreshHubData",
        "parameters": [
          {
            "in": "query",
            "name": "lang",
            "schema": {
              "type": [
                "string",
                "null"
              ]
            },
            "style": "form"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/hub/version": {
      "get": {
        "tags": [
          "hub"
        ],
        "description": "Get hub version information",
        "operationId": "Hub.getHubVersion",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HubVersionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/files/upload": {
      "post": {
        "tags": [
          "files"
        ],
        "description": "Upload a new file",
        "operationId": "Files.uploadFile",
        "requestBody": {
          "description": "multipart form data",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFileResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/files/{file_id}": {
      "get": {
        "tags": [
          "files"
        ],
        "description": "Get file metadata by ID",
        "operationId": "Files.getFile",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "files"
        ],
        "description": "Delete file by ID",
        "operationId": "Files.deleteFile",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileOperationSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/files/{file_id}/download": {
      "get": {
        "tags": [
          "files"
        ],
        "description": "Download file by ID",
        "operationId": "Files.downloadFile",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlobType"
                }
              }
            }
          }
        }
      }
    },
    "/api/files/{file_id}/download-token": {
      "post": {
        "tags": [
          "files"
        ],
        "description": "Generate download token for file",
        "operationId": "Files.generateDownloadToken",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/files/{file_id}/download-with-token": {
      "get": {
        "tags": [
          "files"
        ],
        "description": "Download file using token (no auth required)",
        "operationId": "Files.downloadFileWithToken",
        "parameters": [
          {
            "in": "query",
            "name": "token",
            "schema": {
              "type": [
                "string",
                "null"
              ]
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlobType"
                }
              }
            }
          }
        }
      }
    },
    "/api/files/{file_id}/preview": {
      "get": {
        "tags": [
          "files"
        ],
        "description": "Get file preview by ID",
        "operationId": "Files.getFilePreview",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlobType"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{project_id}/files": {
      "get": {
        "tags": [
          "files"
        ],
        "description": "List files in project",
        "operationId": "Files.listProjectFiles",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": [
                "string",
                "null"
              ]
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "files"
        ],
        "description": "Upload file to project",
        "operationId": "Files.uploadProjectFile",
        "requestBody": {
          "description": "multipart form data",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFileResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/messages/{message_id}/files": {
      "get": {
        "tags": [
          "files"
        ],
        "description": "List files attached to message",
        "operationId": "Files.listMessageFiles",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/files/{file_id}/messages/{message_id}": {
      "delete": {
        "tags": [
          "files"
        ],
        "description": "Remove file from message",
        "operationId": "Files.removeFileFromMessage",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileOperationSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rag/providers": {
      "get": {
        "tags": [
          "rag"
        ],
        "description": "List RAG providers available for creating instances",
        "operationId": "Rag.listCreatableProviders",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RAGProvider"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/rag/instances": {
      "get": {
        "tags": [
          "rag"
        ],
        "description": "List user's RAG instances",
        "operationId": "Rag.listInstances",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "include_system",
            "schema": {
              "type": [
                "boolean",
                "null"
              ]
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RAGInstanceListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rag/providers/{provider_id}/instances": {
      "post": {
        "tags": [
          "rag"
        ],
        "description": "Create new RAG instance for provider",
        "operationId": "Rag.createInstance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRAGInstanceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RAGInstance"
                }
              }
            }
          }
        }
      }
    },
    "/api/rag/instances/{instance_id}": {
      "get": {
        "tags": [
          "rag"
        ],
        "description": "Get RAG instance by ID",
        "operationId": "Rag.getInstance",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RAGInstance"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "rag"
        ],
        "description": "Update RAG instance",
        "operationId": "Rag.updateInstance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRAGInstanceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RAGInstance"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "rag"
        ],
        "description": "Delete RAG instance",
        "operationId": "Rag.deleteInstance",
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      }
    },
    "/api/rag/instances/{instance_id}/toggle-activate": {
      "put": {
        "tags": [
          "rag"
        ],
        "description": "Toggle RAG instance activate status",
        "operationId": "Rag.toggleInstanceActivate",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RAGInstance"
                }
              }
            }
          }
        }
      }
    },
    "/api/rag/instances/{instance_id}/status/stream": {
      "get": {
        "tags": [
          "rag"
        ],
        "description": "Subscribe to RAG instance status stream via SSE",
        "operationId": "Rag.subscribeInstanceStatus",
        "parameters": [
          {
            "in": "query",
            "name": "include_files",
            "description": "Include file-level details (default: true)",
            "schema": {
              "description": "Include file-level details (default: true)",
              "type": [
                "boolean",
                "null"
              ]
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSERAGStatusEvent"
                }
              }
            }
          }
        }
      }
    },
    "/api/rag/instances/{instance_id}/files": {
      "get": {
        "tags": [
          "rag"
        ],
        "description": "List files in RAG instance",
        "operationId": "Rag.listInstanceFiles",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "status_filter",
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/RAGProcessingStatus"
                },
                {
                  "type": "null"
                }
              ]
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": [
                "string",
                "null"
              ]
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RAGInstanceFilesListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "rag"
        ],
        "description": "Upload file to RAG instance",
        "operationId": "Rag.uploadInstanceFile",
        "requestBody": {
          "description": "multipart form data",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFileResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rag/instances/{instance_id}/files/{file_id}": {
      "delete": {
        "tags": [
          "rag"
        ],
        "description": "Delete file from RAG instance",
        "operationId": "Rag.deleteInstanceFile",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileOperationSuccessResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "InitResponse": {
        "type": "object",
        "properties": {
          "needs_setup": {
            "type": "boolean"
          },
          "allow_registration": {
            "type": "boolean"
          },
          "is_desktop": {
            "type": "boolean"
          },
          "token": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "needs_setup",
          "allow_registration",
          "is_desktop"
        ]
      },
      "CreateUserRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "profile": true
        },
        "required": [
          "username",
          "email",
          "password"
        ]
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "token",
          "user",
          "expires_at"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "username": {
            "type": "string"
          },
          "emails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEmail"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "profile": true,
          "services": {
            "$ref": "#/components/schemas/UserServices"
          },
          "is_active": {
            "type": "boolean"
          },
          "is_protected": {
            "type": "boolean"
          },
          "last_login_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            }
          }
        },
        "required": [
          "id",
          "username",
          "emails",
          "created_at",
          "services",
          "is_active",
          "is_protected",
          "updated_at",
          "groups"
        ]
      },
      "UserEmail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          },
          "address": {
            "type": "string"
          },
          "verified": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "user_id",
          "address",
          "verified",
          "created_at"
        ]
      },
      "UserServices": {
        "type": "object",
        "properties": {
          "password": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PasswordService"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "PasswordService": {
        "type": "object",
        "properties": {
          "bcrypt": {
            "type": "string"
          },
          "salt": {
            "type": "string"
          }
        },
        "required": [
          "bcrypt",
          "salt"
        ]
      },
      "UserGroup": {
        "type": "object",
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "permissions": {
            "$ref": "#/components/schemas/UserGroupPermissions"
          },
          "is_protected": {
            "type": "boolean"
          },
          "is_active": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "permissions",
          "is_protected",
          "is_active",
          "created_at",
          "updated_at"
        ]
      },
      "UserGroupPermissions": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "username_or_email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "username_or_email",
          "password"
        ]
      },
      "Permission": {
        "description": "AWS-style permissions for fine-grained access control",
        "type": "string",
        "enum": [
          "users::read",
          "users::edit",
          "users::delete",
          "users::create",
          "users::reset-password",
          "users::toggle-status",
          "groups::read",
          "groups::edit",
          "groups::delete",
          "groups::create",
          "groups::assign-users",
          "groups::assign-providers",
          "chat::read",
          "chat::create",
          "chat::edit",
          "chat::delete",
          "chat::stream",
          "chat::search",
          "chat::branch",
          "projects::read",
          "projects::create",
          "projects::edit",
          "projects::delete",
          "files::read",
          "files::upload",
          "files::delete",
          "files::download",
          "files::preview",
          "files::generate-token",
          "assistants::read",
          "assistants::create",
          "assistants::edit",
          "assistants::delete",
          "assistants::admin::read",
          "assistants::admin::create",
          "assistants::admin::edit",
          "assistants::admin::delete",
          "settings::read",
          "settings::edit",
          "settings::delete",
          "providers::read",
          "providers::edit",
          "providers::delete",
          "providers::create",
          "providers::view-groups",
          "models::read",
          "models::create",
          "models::edit",
          "models::delete",
          "models::start",
          "models::stop",
          "models::enable",
          "models::disable",
          "models::upload",
          "repositories::read",
          "repositories::edit",
          "repositories::delete",
          "repositories::create",
          "rag::providers::read",
          "rag::providers::create",
          "rag::providers::edit",
          "rag::providers::delete",
          "rag::repositories::read",
          "rag::repositories::create",
          "rag::repositories::edit",
          "rag::repositories::delete",
          "rag::instances::read",
          "rag::instances::create",
          "rag::instances::edit",
          "rag::instances::delete",
          "rag::files::read",
          "rag::files::add",
          "rag::files::remove",
          "rag::admin::providers::read",
          "rag::admin::providers::create",
          "rag::admin::providers::edit",
          "rag::admin::providers::delete",
          "rag::admin::instances::read",
          "rag::admin::instances::create",
          "rag::admin::instances::edit",
          "rag::admin::instances::delete",
          "model-downloads::read",
          "model-downloads::create",
          "model-downloads::cancel",
          "model-downloads::delete",
          "hardware::read",
          "hardware::monitor",
          "devices::read",
          "engines::read",
          "api-proxy::read",
          "api-proxy::start",
          "api-proxy::stop",
          "api-proxy::configure",
          "config::user-registration::read",
          "config::user-registration::edit",
          "config::appearance::read",
          "config::appearance::edit",
          "config::proxy::read",
          "config::proxy::edit",
          "config::ngrok::read",
          "config::ngrok::edit",
          "config::ngrok::start",
          "config::ngrok::stop",
          "hub::models::read",
          "hub::assistants::read",
          "hub::refresh",
          "hub::version::read",
          "*"
        ]
      },
      "UserRegistrationStatusResponse": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        },
        "required": [
          "enabled"
        ]
      },
      "DefaultLanguageResponse": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          }
        },
        "required": [
          "language"
        ]
      },
      "TestProxyConnectionRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "no_proxy": {
            "type": "string"
          },
          "ignore_ssl_certificates": {
            "type": "boolean"
          }
        },
        "required": [
          "enabled",
          "url",
          "username",
          "password",
          "no_proxy",
          "ignore_ssl_certificates"
        ]
      },
      "TestProxyConnectionResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "PaginationQuery": {
        "description": "Standard pagination query parameters for basic list endpoints",
        "type": "object",
        "properties": {
          "page": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "per_page": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          }
        }
      },
      "UserListResponse": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "per_page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "users",
          "total",
          "page",
          "per_page"
        ]
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": [
              "string",
              "null"
            ]
          },
          "email": {
            "type": [
              "string",
              "null"
            ]
          },
          "is_active": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "profile": true
        }
      },
      "UserActiveStatusResponse": {
        "type": "object",
        "properties": {
          "is_active": {
            "type": "boolean"
          }
        },
        "required": [
          "is_active"
        ]
      },
      "ResetPasswordRequest": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "format": "uuid"
          },
          "new_password": {
            "type": "string"
          }
        },
        "required": [
          "user_id",
          "new_password"
        ]
      },
      "UserGroupListResponse": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "per_page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "groups",
          "total",
          "page",
          "per_page"
        ]
      },
      "CreateUserGroupRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "provider_ids": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "rag_provider_ids": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "required": [
          "name",
          "permissions"
        ]
      },
      "UpdateUserGroupRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "type": [
              "string",
              "null"
            ]
          },
          "permissions": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          },
          "provider_ids": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "rag_provider_ids": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "is_active": {
            "type": [
              "boolean",
              "null"
            ]
          }
        }
      },
      "AssignUserToGroupRequest": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "format": "uuid"
          },
          "group_id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "user_id",
          "group_id"
        ]
      },
      "ProviderListResponse": {
        "type": "object",
        "properties": {
          "providers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Provider"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "per_page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "providers",
          "total",
          "page",
          "per_page"
        ]
      },
      "Provider": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ProviderType"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "api_key": {
            "type": [
              "string",
              "null"
            ]
          },
          "base_url": {
            "type": [
              "string",
              "null"
            ]
          },
          "built_in": {
            "type": "boolean"
          },
          "proxy_settings": {
            "$ref": "#/components/schemas/JsonOption_for_ProxySettings"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "enabled",
          "built_in",
          "proxy_settings",
          "created_at",
          "updated_at"
        ]
      },
      "ProviderType": {
        "type": "string",
        "enum": [
          "local",
          "openai",
          "anthropic",
          "groq",
          "gemini",
          "mistral",
          "deepseek",
          "huggingface",
          "custom"
        ]
      },
      "JsonOption_for_ProxySettings": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/ProxySettings"
          },
          {
            "type": "null"
          }
        ]
      },
      "ProxySettings": {
        "description": "Common proxy settings structure used for both system-wide and provider-specific proxy configuration",
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "default": false
          },
          "url": {
            "type": "string",
            "default": ""
          },
          "username": {
            "type": "string",
            "default": ""
          },
          "password": {
            "type": "string",
            "default": ""
          },
          "no_proxy": {
            "type": "string",
            "default": ""
          },
          "ignore_ssl_certificates": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "RAGProviderListResponse": {
        "type": "object",
        "properties": {
          "providers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RAGProvider"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "per_page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "providers",
          "total",
          "page",
          "per_page"
        ]
      },
      "RAGProvider": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/RAGProviderType"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "api_key": {
            "type": [
              "string",
              "null"
            ]
          },
          "base_url": {
            "type": [
              "string",
              "null"
            ]
          },
          "built_in": {
            "type": "boolean"
          },
          "can_user_create_instance": {
            "type": "boolean"
          },
          "proxy_settings": {
            "$ref": "#/components/schemas/JsonOption_for_ProxySettings"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "enabled",
          "built_in",
          "can_user_create_instance",
          "proxy_settings",
          "created_at",
          "updated_at"
        ]
      },
      "RAGProviderType": {
        "type": "string",
        "enum": [
          "local",
          "lightrag",
          "ragstack",
          "chroma",
          "weaviate",
          "pinecone",
          "custom"
        ]
      },
      "UpdateUserRegistrationRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        },
        "required": [
          "enabled"
        ]
      },
      "UpdateDefaultLanguageRequest": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          }
        },
        "required": [
          "language"
        ]
      },
      "ProxySettingsResponse": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "no_proxy": {
            "type": "string"
          },
          "ignore_ssl_certificates": {
            "type": "boolean"
          }
        },
        "required": [
          "enabled",
          "url",
          "username",
          "password",
          "no_proxy",
          "ignore_ssl_certificates"
        ]
      },
      "UpdateProxySettingsRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "no_proxy": {
            "type": "string"
          },
          "ignore_ssl_certificates": {
            "type": "boolean"
          }
        },
        "required": [
          "enabled",
          "url",
          "username",
          "password",
          "no_proxy",
          "ignore_ssl_certificates"
        ]
      },
      "NgrokSettingsResponse": {
        "type": "object",
        "properties": {
          "api_key": {
            "type": "string"
          },
          "tunnel_enabled": {
            "type": "boolean"
          },
          "tunnel_url": {
            "type": [
              "string",
              "null"
            ]
          },
          "tunnel_status": {
            "type": "string"
          },
          "auto_start": {
            "type": "boolean"
          },
          "domain": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "api_key",
          "tunnel_enabled",
          "tunnel_status",
          "auto_start"
        ]
      },
      "UpdateNgrokSettingsRequest": {
        "type": "object",
        "properties": {
          "api_key": {
            "type": [
              "string",
              "null"
            ]
          },
          "tunnel_enabled": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "auto_start": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "domain": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "NgrokStatusResponse": {
        "type": "object",
        "properties": {
          "tunnel_active": {
            "type": "boolean"
          },
          "tunnel_url": {
            "type": [
              "string",
              "null"
            ]
          },
          "tunnel_status": {
            "type": "string"
          },
          "last_error": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "tunnel_active",
          "tunnel_status"
        ]
      },
      "UpdateUserPasswordRequest": {
        "type": "object",
        "properties": {
          "current_password": {
            "type": [
              "string",
              "null"
            ]
          },
          "new_password": {
            "type": "string"
          }
        },
        "required": [
          "new_password"
        ]
      },
      "CreateProviderRequest": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "enabled": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "api_key": {
            "type": [
              "string",
              "null"
            ]
          },
          "base_url": {
            "type": [
              "string",
              "null"
            ]
          },
          "proxy_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ProxySettings"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "name",
          "type"
        ]
      },
      "UpdateProviderRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": [
              "string",
              "null"
            ]
          },
          "enabled": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "api_key": {
            "type": [
              "string",
              "null"
            ]
          },
          "base_url": {
            "type": [
              "string",
              "null"
            ]
          },
          "proxy_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ProxySettings"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "Model": {
        "type": "object",
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "provider_id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "alias": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "is_deprecated": {
            "type": "boolean"
          },
          "is_active": {
            "type": "boolean"
          },
          "capabilities": {
            "$ref": "#/components/schemas/JsonOption_for_ModelCapabilities"
          },
          "parameters": {
            "$ref": "#/components/schemas/JsonOption_for_ModelParameters"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "file_size_bytes": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64"
          },
          "validation_status": {
            "type": [
              "string",
              "null"
            ]
          },
          "validation_issues": {
            "$ref": "#/components/schemas/JsonOption_for_Array_of_string"
          },
          "port": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "pid": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "engine_type": {
            "$ref": "#/components/schemas/EngineType"
          },
          "engine_settings": {
            "$ref": "#/components/schemas/JsonOption_for_ModelEngineSettings"
          },
          "file_format": {
            "$ref": "#/components/schemas/FileFormat"
          },
          "source": {
            "$ref": "#/components/schemas/JsonOption_for_SourceInfo"
          }
        },
        "required": [
          "id",
          "provider_id",
          "name",
          "alias",
          "enabled",
          "is_deprecated",
          "is_active",
          "capabilities",
          "parameters",
          "created_at",
          "updated_at",
          "validation_issues",
          "engine_type",
          "engine_settings",
          "file_format",
          "source"
        ]
      },
      "JsonOption_for_ModelCapabilities": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/ModelCapabilities"
          },
          {
            "type": "null"
          }
        ]
      },
      "ModelCapabilities": {
        "description": "Model capabilities configuration",
        "type": "object",
        "properties": {
          "vision": {
            "description": "Vision capability - can process images",
            "type": [
              "boolean",
              "null"
            ]
          },
          "audio": {
            "description": "Audio capability - can process audio",
            "type": [
              "boolean",
              "null"
            ]
          },
          "tools": {
            "description": "Tools capability - can use function calling/tools",
            "type": [
              "boolean",
              "null"
            ]
          },
          "code_interpreter": {
            "description": "Code interpreter capability",
            "type": [
              "boolean",
              "null"
            ]
          },
          "chat": {
            "description": "Chat capability - can engage in conversational text generation",
            "type": [
              "boolean",
              "null"
            ]
          },
          "text_embedding": {
            "description": "Text embedding capability - can generate text embeddings for semantic search",
            "type": [
              "boolean",
              "null"
            ]
          },
          "image_generator": {
            "description": "Image generation capability - can generate images from text descriptions",
            "type": [
              "boolean",
              "null"
            ]
          }
        }
      },
      "JsonOption_for_ModelParameters": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/ModelParameters"
          },
          {
            "type": "null"
          }
        ]
      },
      "ModelParameters": {
        "description": "Model parameters for inference configuration",
        "type": "object",
        "properties": {
          "max_tokens": {
            "description": "Context size for the model",
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "temperature": {
            "description": "Temperature for randomness (0.0-2.0)",
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "top_k": {
            "description": "Top-K sampling parameter",
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "top_p": {
            "description": "Top-P (nucleus) sampling parameter (0.0-1.0)",
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "min_p": {
            "description": "Min-P sampling parameter (0.0-1.0)",
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "repeat_last_n": {
            "description": "Number of last tokens to consider for repetition penalty",
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "repeat_penalty": {
            "description": "Repetition penalty (1.0 = no penalty)",
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "presence_penalty": {
            "description": "Presence penalty for new tokens",
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "frequency_penalty": {
            "description": "Frequency penalty for repeated tokens",
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "seed": {
            "description": "Random seed for reproducible outputs",
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "stop": {
            "description": "Stop sequences to terminate generation",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "JsonOption_for_Array_of_string": {
        "type": [
          "array",
          "null"
        ],
        "items": {
          "type": "string"
        }
      },
      "EngineType": {
        "type": "string",
        "enum": [
          "mistralrs",
          "llamacpp",
          "none"
        ]
      },
      "JsonOption_for_ModelEngineSettings": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/ModelEngineSettings"
          },
          {
            "type": "null"
          }
        ]
      },
      "ModelEngineSettings": {
        "description": "Engine-specific settings for model configuration",
        "type": "object",
        "properties": {
          "mistralrs": {
            "description": "MistralRs-specific settings",
            "anyOf": [
              {
                "$ref": "#/components/schemas/MistralRsSettings"
              },
              {
                "type": "null"
              }
            ]
          },
          "llamacpp": {
            "description": "LlamaCpp-specific settings",
            "anyOf": [
              {
                "$ref": "#/components/schemas/LlamaCppSettings"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "MistralRsSettings": {
        "description": "MistralRs-specific settings for individual model performance and batching configuration",
        "type": "object",
        "properties": {
          "command": {
            "description": "Model command type for MistralRS engine",
            "anyOf": [
              {
                "$ref": "#/components/schemas/MistralRsCommand"
              },
              {
                "type": "null"
              }
            ]
          },
          "model_id_name": {
            "description": "Model ID name for --model-id in subcommands",
            "type": [
              "string",
              "null"
            ]
          },
          "tokenizer_json": {
            "description": "Path to tokenizer.json file",
            "type": [
              "string",
              "null"
            ]
          },
          "arch": {
            "description": "Model architecture (for plain models)",
            "type": [
              "string",
              "null"
            ]
          },
          "quantized_filename": {
            "description": "GGUF filename pattern (for GGUF models)",
            "type": [
              "string",
              "null"
            ]
          },
          "weight_file": {
            "description": "Specific weight file",
            "type": [
              "string",
              "null"
            ]
          },
          "device_type": {
            "description": "Device type (cpu, cuda, metal, etc.)",
            "anyOf": [
              {
                "$ref": "#/components/schemas/DeviceType"
              },
              {
                "type": "null"
              }
            ]
          },
          "device_ids": {
            "description": "Array of device IDs for multi-GPU",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "num_device_layers": {
            "description": "Per-device layer distribution",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          },
          "cpu": {
            "description": "Force CPU mode",
            "type": [
              "boolean",
              "null"
            ]
          },
          "max_seqs": {
            "description": "Maximum running sequences at any time (--max-seqs)",
            "type": [
              "integer",
              "null"
            ],
            "format": "int64"
          },
          "max_seq_len": {
            "description": "Maximum sequence length (--max-seq-len)",
            "type": [
              "integer",
              "null"
            ],
            "format": "int64"
          },
          "no_kv_cache": {
            "description": "Use no KV cache (--no-kv-cache)",
            "type": [
              "boolean",
              "null"
            ]
          },
          "truncate_sequence": {
            "description": "Truncate sequences that exceed max length (--truncate-sequence)",
            "type": [
              "boolean",
              "null"
            ]
          },
          "paged_attn_gpu_mem": {
            "description": "GPU memory for KV cache in MBs (--pa-gpu-mem)",
            "type": [
              "integer",
              "null"
            ],
            "format": "int64"
          },
          "paged_attn_gpu_mem_usage": {
            "description": "GPU memory usage percentage 0-1 (--pa-gpu-mem-usage)",
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "paged_ctxt_len": {
            "description": "Total context length for KV cache (--pa-ctxt-len)",
            "type": [
              "integer",
              "null"
            ],
            "format": "int64"
          },
          "paged_attn_block_size": {
            "description": "PagedAttention block size (--pa-blk-size)",
            "type": [
              "integer",
              "null"
            ],
            "format": "int64"
          },
          "no_paged_attn": {
            "description": "Disable PagedAttention on CUDA (--no-paged-attn)",
            "type": [
              "boolean",
              "null"
            ]
          },
          "paged_attn": {
            "description": "Enable PagedAttention on Metal (--paged-attn)",
            "type": [
              "boolean",
              "null"
            ]
          },
          "chat_template": {
            "description": "Chat template string",
            "type": [
              "string",
              "null"
            ]
          },
          "jinja_explicit": {
            "description": "Jinja template explicit definition",
            "type": [
              "string",
              "null"
            ]
          },
          "prefix_cache_n": {
            "description": "Number of prefix caches to hold (--prefix-cache-n)",
            "type": [
              "integer",
              "null"
            ],
            "format": "int64"
          },
          "prompt_chunksize": {
            "description": "Prompt batching chunk size (--prompt-batchsize)",
            "type": [
              "integer",
              "null"
            ],
            "format": "int64"
          },
          "dtype": {
            "description": "Model data type: auto, f16, f32, bf16 (--dtype)",
            "type": [
              "string",
              "null"
            ]
          },
          "in_situ_quant": {
            "description": "In-situ quantization method (--isq)",
            "type": [
              "string",
              "null"
            ]
          },
          "seed": {
            "description": "Seed for reproducible generation (--seed)",
            "type": [
              "integer",
              "null"
            ],
            "format": "int64"
          },
          "max_edge": {
            "description": "Maximum edge length for image resizing (--max-edge)",
            "type": [
              "integer",
              "null"
            ],
            "format": "int64"
          },
          "max_num_images": {
            "description": "Maximum number of images (--max-num-images)",
            "type": [
              "integer",
              "null"
            ],
            "format": "int64"
          },
          "max_image_length": {
            "description": "Maximum image edge length (--max-image-length)",
            "type": [
              "integer",
              "null"
            ],
            "format": "int64"
          },
          "serve_ip": {
            "description": "Server IP address to serve on",
            "type": [
              "string",
              "null"
            ]
          },
          "log_file": {
            "description": "Log file path",
            "type": [
              "string",
              "null"
            ]
          },
          "enable_search": {
            "description": "Enable search functionality",
            "type": [
              "boolean",
              "null"
            ]
          },
          "search_bert_model": {
            "description": "BERT model for search",
            "type": [
              "string",
              "null"
            ]
          },
          "interactive_mode": {
            "description": "Enable interactive mode",
            "type": [
              "boolean",
              "null"
            ]
          },
          "enable_thinking": {
            "description": "Enable thinking capabilities",
            "type": [
              "boolean",
              "null"
            ]
          },
          "token_source": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "MistralRsCommand": {
        "description": "MistralRS command types for different model formats and use cases",
        "oneOf": [
          {
            "description": "Plain model format (safetensors/pytorch)",
            "type": "string",
            "const": "plain"
          },
          {
            "description": "GGUF quantized model format",
            "type": "string",
            "const": "gguf"
          },
          {
            "description": "Auto-loader for various model formats",
            "type": "string",
            "const": "run"
          },
          {
            "description": "Vision-enabled plain models for multimodal capabilities",
            "type": "string",
            "const": "vision-plain"
          },
          {
            "description": "X-LoRA (Cross-Layer LoRA) models",
            "type": "string",
            "const": "x-lora"
          },
          {
            "description": "LoRA (Low-Rank Adaptation) models",
            "type": "string",
            "const": "lora"
          },
          {
            "description": "TOML configuration-based models",
            "type": "string",
            "const": "toml"
          }
        ]
      },
      "DeviceType": {
        "description": "Device types for ML model inference",
        "oneOf": [
          {
            "description": "CPU-only inference",
            "type": "string",
            "const": "cpu"
          },
          {
            "description": "NVIDIA CUDA GPU acceleration",
            "type": "string",
            "const": "cuda"
          },
          {
            "description": "Apple Metal GPU acceleration (macOS)",
            "type": "string",
            "const": "metal"
          },
          {
            "description": "AMD ROCm GPU acceleration",
            "type": "string",
            "const": "rocm"
          },
          {
            "description": "Vulkan GPU acceleration",
            "type": "string",
            "const": "vulkan"
          },
          {
            "description": "OpenCL GPU acceleration",
            "type": "string",
            "const": "opencl"
          },
          {
            "description": "Automatic device detection and selection",
            "type": "string",
            "const": "auto"
          }
        ]
      },
      "LlamaCppSettings": {
        "description": "LlamaCpp-specific settings for llama-server configuration",
        "type": "object",
        "properties": {
          "device_type": {
            "description": "Device type (cpu, cuda, metal, etc.)",
            "anyOf": [
              {
                "$ref": "#/components/schemas/DeviceType"
              },
              {
                "type": "null"
              }
            ]
          },
          "device_ids": {
            "description": "Array of device IDs for multi-GPU",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "ctx_size": {
            "description": "Context size (--ctx-size, default: 4096)",
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "batch_size": {
            "description": "Logical batch size (--batch-size, default: 2048)",
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "ubatch_size": {
            "description": "Physical batch size (--ubatch-size, default: 512)",
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "parallel": {
            "description": "Number of parallel sequences (--parallel, default: 1)",
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "keep": {
            "description": "Tokens to keep from initial prompt (--keep, default: 0)",
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "mlock": {
            "description": "Force model to stay in RAM (--mlock, default: false)",
            "type": [
              "boolean",
              "null"
            ]
          },
          "no_mmap": {
            "description": "Disable memory mapping (--no-mmap, default: false)",
            "type": [
              "boolean",
              "null"
            ]
          },
          "threads": {
            "description": "Generation threads (--threads, default: -1)",
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "threads_batch": {
            "description": "Batch processing threads (--threads-batch, default: same as threads)",
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "cont_batching": {
            "description": "Enable continuous batching (--cont-batching, default: true)",
            "type": [
              "boolean",
              "null"
            ]
          },
          "flash_attn": {
            "description": "Enable Flash Attention (--flash-attn, default: false)",
            "type": [
              "boolean",
              "null"
            ]
          },
          "no_kv_offload": {
            "description": "Disable KV cache offloading (--no-kv-offload, default: false)",
            "type": [
              "boolean",
              "null"
            ]
          },
          "n_gpu_layers": {
            "description": "Number of layers on GPU (--n-gpu-layers, default: 0)",
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "main_gpu": {
            "description": "Primary GPU index (--main-gpu, default: 0)",
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "split_mode": {
            "description": "How to split across GPUs: none/layer/row (--split-mode)",
            "type": [
              "string",
              "null"
            ]
          },
          "tensor_split": {
            "description": "GPU memory distribution ratios (--tensor-split)",
            "type": [
              "string",
              "null"
            ]
          },
          "rope_freq_base": {
            "description": "RoPE base frequency (--rope-freq-base)",
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "rope_freq_scale": {
            "description": "RoPE frequency scaling (--rope-freq-scale)",
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "rope_scaling": {
            "description": "RoPE scaling method: none/linear/yarn (--rope-scaling)",
            "type": [
              "string",
              "null"
            ]
          },
          "cache_type_k": {
            "description": "KV cache data type for K (--cache-type-k)",
            "type": [
              "string",
              "null"
            ]
          },
          "cache_type_v": {
            "description": "KV cache data type for V (--cache-type-v)",
            "type": [
              "string",
              "null"
            ]
          },
          "seed": {
            "description": "Random seed (--seed, default: -1)",
            "type": [
              "integer",
              "null"
            ],
            "format": "int64"
          },
          "numa": {
            "description": "NUMA optimizations: distribute/isolate/numactl (--numa)",
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "FileFormat": {
        "description": "File format types for local models",
        "type": "string",
        "enum": [
          "safetensors",
          "pytorch",
          "gguf"
        ]
      },
      "JsonOption_for_SourceInfo": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/SourceInfo"
          },
          {
            "type": "null"
          }
        ]
      },
      "SourceInfo": {
        "description": "Source information for download tracking",
        "type": "object",
        "properties": {
          "type": {
            "description": "Type of download source: \"manual\" or \"hub\"",
            "type": "string"
          },
          "id": {
            "description": "Model ID from hub (for hub downloads) or null for manual downloads",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "AvailableDevicesResponse": {
        "type": "object",
        "properties": {
          "devices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeviceInfo"
            }
          },
          "default_device_type": {
            "$ref": "#/components/schemas/DeviceType"
          },
          "supports_multi_gpu": {
            "type": "boolean"
          }
        },
        "required": [
          "devices",
          "default_device_type",
          "supports_multi_gpu"
        ]
      },
      "DeviceInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "device_type": {
            "$ref": "#/components/schemas/DeviceType"
          },
          "memory_total": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0
          },
          "memory_free": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0
          },
          "is_available": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "name",
          "device_type",
          "is_available"
        ]
      },
      "CreateModelRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "provider_id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "alias": {
            "type": "string"
          },
          "enabled": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "capabilities": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModelCapabilities"
              },
              {
                "type": "null"
              }
            ]
          },
          "parameters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModelParameters"
              },
              {
                "type": "null"
              }
            ]
          },
          "engine_type": {
            "$ref": "#/components/schemas/EngineType"
          },
          "engine_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModelEngineSettings"
              },
              {
                "type": "null"
              }
            ]
          },
          "file_format": {
            "$ref": "#/components/schemas/FileFormat"
          },
          "source": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SourceInfo"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "provider_id",
          "name",
          "alias",
          "engine_type",
          "file_format"
        ]
      },
      "UpdateModelRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "type": [
              "string",
              "null"
            ]
          },
          "alias": {
            "type": [
              "string",
              "null"
            ]
          },
          "enabled": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "is_active": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "capabilities": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModelCapabilities"
              },
              {
                "type": "null"
              }
            ]
          },
          "parameters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModelParameters"
              },
              {
                "type": "null"
              }
            ]
          },
          "engine_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EngineType"
              },
              {
                "type": "null"
              }
            ]
          },
          "engine_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModelEngineSettings"
              },
              {
                "type": "null"
              }
            ]
          },
          "file_format": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FileFormat"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "DownloadFromRepositoryRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "provider_id": {
            "type": "string",
            "format": "uuid"
          },
          "repository_id": {
            "type": "string",
            "format": "uuid"
          },
          "repository_path": {
            "type": "string"
          },
          "repository_branch": {
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "type": "string"
          },
          "alias": {
            "type": "string"
          },
          "file_format": {
            "$ref": "#/components/schemas/FileFormat"
          },
          "main_filename": {
            "type": "string"
          },
          "capabilities": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModelCapabilities"
              },
              {
                "type": "null"
              }
            ]
          },
          "parameters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModelParameters"
              },
              {
                "type": "null"
              }
            ]
          },
          "engine_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EngineType"
              },
              {
                "type": "null"
              }
            ]
          },
          "engine_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModelEngineSettings"
              },
              {
                "type": "null"
              }
            ]
          },
          "source": {
            "$ref": "#/components/schemas/SourceInfo"
          }
        },
        "required": [
          "provider_id",
          "repository_id",
          "repository_path",
          "name",
          "alias",
          "file_format",
          "main_filename",
          "source"
        ]
      },
      "DownloadInstance": {
        "description": "Main download instance struct",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "provider_id": {
            "type": "string",
            "format": "uuid"
          },
          "repository_id": {
            "type": "string",
            "format": "uuid"
          },
          "request_data": {
            "$ref": "#/components/schemas/DownloadRequestData"
          },
          "status": {
            "$ref": "#/components/schemas/DownloadStatus"
          },
          "progress_data": {
            "$ref": "#/components/schemas/JsonOption_for_DownloadProgressData"
          },
          "error_message": {
            "type": [
              "string",
              "null"
            ]
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "completed_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "model_id": {
            "type": [
              "string",
              "null"
            ],
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "provider_id",
          "repository_id",
          "request_data",
          "status",
          "progress_data",
          "started_at",
          "created_at",
          "updated_at"
        ]
      },
      "DownloadRequestData": {
        "description": "Request data for initiating a download",
        "type": "object",
        "properties": {
          "description": {
            "description": "Model description",
            "type": [
              "string",
              "null"
            ]
          },
          "model_name": {
            "description": "Model name or ID from the repository",
            "type": "string"
          },
          "revision": {
            "description": "Model revision/tag (e.g., \"main\", \"v1.0\")",
            "type": [
              "string",
              "null"
            ]
          },
          "files": {
            "description": "Specific files to download (if None, download all)",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          },
          "quantization": {
            "description": "Quantization format (e.g., \"q4_0\", \"q8_0\")",
            "type": [
              "string",
              "null"
            ]
          },
          "repository_path": {
            "description": "Repository path (e.g., \"microsoft/DialoGPT-medium\")",
            "type": [
              "string",
              "null"
            ]
          },
          "alias": {
            "description": "Model alias/display name",
            "type": [
              "string",
              "null"
            ]
          },
          "file_format": {
            "description": "File format of the model",
            "type": [
              "string",
              "null"
            ]
          },
          "main_filename": {
            "description": "Main filename for the model",
            "type": [
              "string",
              "null"
            ]
          },
          "capabilities": {
            "description": "Model capabilities configuration",
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModelCapabilities"
              },
              {
                "type": "null"
              }
            ]
          },
          "parameters": {
            "description": "Model parameters configuration",
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModelParameters"
              },
              {
                "type": "null"
              }
            ]
          },
          "engine_type": {
            "description": "Model settings configuration",
            "anyOf": [
              {
                "$ref": "#/components/schemas/EngineType"
              },
              {
                "type": "null"
              }
            ]
          },
          "engine_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModelEngineSettings"
              },
              {
                "type": "null"
              }
            ]
          },
          "source": {
            "description": "Source information for tracking download origin",
            "anyOf": [
              {
                "$ref": "#/components/schemas/SourceInfo"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "model_name"
        ]
      },
      "DownloadStatus": {
        "description": "Download instance status enum",
        "type": "string",
        "enum": [
          "pending",
          "downloading",
          "completed",
          "failed",
          "cancelled"
        ]
      },
      "JsonOption_for_DownloadProgressData": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/DownloadProgressData"
          },
          {
            "type": "null"
          }
        ]
      },
      "DownloadProgressData": {
        "description": "Progress data for download tracking",
        "type": "object",
        "properties": {
          "phase": {
            "description": "Current download phase",
            "allOf": [
              {
                "$ref": "#/components/schemas/DownloadPhase"
              }
            ]
          },
          "current": {
            "description": "Current bytes/items processed",
            "type": "integer",
            "format": "int64"
          },
          "total": {
            "description": "Total bytes/items to process",
            "type": "integer",
            "format": "int64"
          },
          "message": {
            "description": "Progress message to display",
            "type": "string"
          },
          "speed_bps": {
            "description": "Download speed in bytes per second",
            "type": "integer",
            "format": "int64"
          },
          "eta_seconds": {
            "description": "Estimated time remaining in seconds",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "phase",
          "current",
          "total",
          "message",
          "speed_bps",
          "eta_seconds"
        ]
      },
      "DownloadPhase": {
        "description": "Download phase enum",
        "type": "string",
        "enum": [
          "created",
          "connecting",
          "analyzing",
          "downloading",
          "receiving",
          "resolving",
          "checkingout",
          "committing",
          "complete",
          "error"
        ]
      },
      "RepositoryListResponse": {
        "type": "object",
        "properties": {
          "repositories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Repository"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "per_page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "repositories",
          "total",
          "page",
          "per_page"
        ]
      },
      "Repository": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "auth_type": {
            "type": "string"
          },
          "auth_config": {
            "$ref": "#/components/schemas/JsonOption_for_RepositoryAuthConfig"
          },
          "enabled": {
            "type": "boolean"
          },
          "built_in": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "url",
          "auth_type",
          "auth_config",
          "enabled",
          "built_in",
          "created_at",
          "updated_at"
        ]
      },
      "JsonOption_for_RepositoryAuthConfig": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/RepositoryAuthConfig"
          },
          {
            "type": "null"
          }
        ]
      },
      "RepositoryAuthConfig": {
        "type": "object",
        "properties": {
          "api_key": {
            "type": [
              "string",
              "null"
            ]
          },
          "username": {
            "type": [
              "string",
              "null"
            ]
          },
          "password": {
            "type": [
              "string",
              "null"
            ]
          },
          "token": {
            "type": [
              "string",
              "null"
            ]
          },
          "auth_test_api_endpoint": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "CreateRepositoryRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "auth_type": {
            "type": "string"
          },
          "auth_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RepositoryAuthConfig"
              },
              {
                "type": "null"
              }
            ]
          },
          "enabled": {
            "type": [
              "boolean",
              "null"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "name",
          "url",
          "auth_type"
        ]
      },
      "UpdateRepositoryRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": [
              "string",
              "null"
            ]
          },
          "url": {
            "type": [
              "string",
              "null"
            ]
          },
          "auth_type": {
            "type": [
              "string",
              "null"
            ]
          },
          "auth_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RepositoryAuthConfig"
              },
              {
                "type": "null"
              }
            ]
          },
          "enabled": {
            "type": [
              "boolean",
              "null"
            ]
          }
        }
      },
      "TestRepositoryConnectionRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "auth_type": {
            "type": "string"
          },
          "auth_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RepositoryAuthConfig"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "name",
          "url",
          "auth_type"
        ]
      },
      "TestRepositoryConnectionResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "RAGInstanceListResponse": {
        "type": "object",
        "properties": {
          "instances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RAGInstance"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "per_page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "instances",
          "total",
          "page",
          "per_page"
        ]
      },
      "RAGInstance": {
        "type": "object",
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "provider_id": {
            "type": "string",
            "format": "uuid"
          },
          "user_id": {
            "type": [
              "string",
              "null"
            ],
            "format": "uuid"
          },
          "project_id": {
            "type": [
              "string",
              "null"
            ],
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "alias": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "is_active": {
            "type": "boolean"
          },
          "is_system": {
            "type": "boolean"
          },
          "status": {
            "$ref": "#/components/schemas/RAGInstanceStatus"
          },
          "error_code": {
            "$ref": "#/components/schemas/RAGInstanceErrorCode"
          },
          "engine_type": {
            "$ref": "#/components/schemas/RAGEngineType"
          },
          "engine_settings": {
            "$ref": "#/components/schemas/RAGEngineSettings"
          },
          "embedding_model_id": {
            "type": [
              "string",
              "null"
            ],
            "format": "uuid"
          },
          "llm_model_id": {
            "type": [
              "string",
              "null"
            ],
            "format": "uuid"
          },
          "age_graph_name": {
            "type": [
              "string",
              "null"
            ]
          },
          "parameters": true,
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "provider_id",
          "name",
          "alias",
          "enabled",
          "is_active",
          "is_system",
          "status",
          "error_code",
          "engine_type",
          "engine_settings",
          "parameters",
          "created_at",
          "updated_at"
        ]
      },
      "RAGInstanceStatus": {
        "type": "string",
        "enum": [
          "none",
          "indexing",
          "finished",
          "error"
        ]
      },
      "RAGInstanceErrorCode": {
        "type": "string",
        "enum": [
          "none",
          "embedding_model_not_config",
          "embedding_model_not_found",
          "llm_model_not_config",
          "llm_model_not_found",
          "provider_connection_failed",
          "provider_not_found",
          "rag_instance_not_found",
          "indexing_failed",
          "file_processing_failed",
          "database_error",
          "configuration_error"
        ]
      },
      "RAGEngineType": {
        "type": "string",
        "enum": [
          "simple_vector",
          "simple_graph"
        ]
      },
      "RAGEngineSettings": {
        "description": "Engine-specific settings for RAG instance configuration",
        "type": "object",
        "properties": {
          "simple_vector": {
            "description": "Simple vector RAG engine settings",
            "anyOf": [
              {
                "$ref": "#/components/schemas/RAGSimpleVectorEngineSettings"
              },
              {
                "type": "null"
              }
            ]
          },
          "simple_graph": {
            "description": "Simple graph RAG engine settings",
            "anyOf": [
              {
                "$ref": "#/components/schemas/RAGSimpleGraphEngineSettings"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "RAGSimpleVectorEngineSettings": {
        "type": "object",
        "properties": {
          "indexing": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RAGSimpleVectorIndexingSettings"
              },
              {
                "type": "null"
              }
            ]
          },
          "querying": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RAGSimpleVectorQueryingSettings"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "RAGSimpleVectorIndexingSettings": {
        "type": "object",
        "properties": {
          "chunk_token_size": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "chunk_overlap_token_size": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "cosine_better_than_threshold": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "max_parallel_insert": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "embedding_batch_size": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          }
        }
      },
      "RAGSimpleVectorQueryingSettings": {
        "type": "object",
        "properties": {
          "top_k": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "chunk_top_k": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "similarity_threshold": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "related_chunk_number": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "max_total_tokens": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "chunk_selection_method": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RAGChunkSelectionMethod"
              },
              {
                "type": "null"
              }
            ]
          },
          "user_prompt": {
            "type": [
              "string",
              "null"
            ]
          },
          "enable_rerank": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "min_rerank_score": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          }
        }
      },
      "RAGChunkSelectionMethod": {
        "type": "string",
        "enum": [
          "weight",
          "vector"
        ]
      },
      "RAGSimpleGraphEngineSettings": {
        "type": "object",
        "properties": {
          "indexing": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RAGSimpleGraphIndexingSettings"
              },
              {
                "type": "null"
              }
            ]
          },
          "querying": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RAGSimpleGraphQueryingSettings"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "RAGSimpleGraphIndexingSettings": {
        "type": "object",
        "properties": {
          "chunk_token_size": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "chunk_overlap_token_size": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "entity_extract_max_gleaning": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "force_llm_summary_on_merge": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "max_graph_nodes": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "summary_max_tokens": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "entity_types": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          },
          "extraction_language": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "RAGSimpleGraphQueryingSettings": {
        "type": "object",
        "properties": {
          "max_entity_tokens": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "max_relation_tokens": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "max_total_tokens": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "max_graph_nodes_per_query": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "top_k": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "chunk_top_k": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "related_chunk_number": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "query_mode": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RAGSimpleGraphQueryMode"
              },
              {
                "type": "null"
              }
            ]
          },
          "chunk_selection_method": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RAGChunkSelectionMethod"
              },
              {
                "type": "null"
              }
            ]
          },
          "user_prompt": {
            "type": [
              "string",
              "null"
            ]
          },
          "enable_rerank": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "min_rerank_score": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          }
        }
      },
      "RAGSimpleGraphQueryMode": {
        "type": "string",
        "enum": [
          "local",
          "global",
          "hybrid",
          "naive",
          "mix",
          "bypass"
        ]
      },
      "CreateSystemRAGInstanceRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "provider_id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "alias": {
            "type": "string"
          },
          "engine_type": {
            "$ref": "#/components/schemas/RAGEngineType"
          },
          "embedding_model_id": {
            "type": [
              "string",
              "null"
            ],
            "format": "uuid"
          },
          "llm_model_id": {
            "type": [
              "string",
              "null"
            ],
            "format": "uuid"
          },
          "parameters": true,
          "engine_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RAGEngineSettings"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "provider_id",
          "name",
          "alias",
          "engine_type"
        ]
      },
      "UpdateRAGInstanceRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "type": [
              "string",
              "null"
            ]
          },
          "enabled": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "is_active": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "embedding_model_id": {
            "type": [
              "string",
              "null"
            ],
            "format": "uuid"
          },
          "llm_model_id": {
            "type": [
              "string",
              "null"
            ],
            "format": "uuid"
          },
          "parameters": true,
          "engine_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RAGEngineSettings"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "CreateRAGProviderRequest": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "enabled": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "api_key": {
            "type": [
              "string",
              "null"
            ]
          },
          "base_url": {
            "type": [
              "string",
              "null"
            ]
          },
          "can_user_create_instance": {
            "type": [
              "boolean",
              "null"
            ]
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "UpdateRAGProviderRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": [
              "string",
              "null"
            ]
          },
          "enabled": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "api_key": {
            "type": [
              "string",
              "null"
            ]
          },
          "base_url": {
            "type": [
              "string",
              "null"
            ]
          },
          "can_user_create_instance": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "proxy_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ProxySettings"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "RAGRepositoryListResponse": {
        "type": "object",
        "properties": {
          "repositories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RAGRepository"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "per_page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "repositories",
          "total",
          "page",
          "per_page"
        ]
      },
      "RAGRepository": {
        "type": "object",
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "requires_auth": {
            "type": "boolean"
          },
          "auth_token": {
            "type": [
              "string",
              "null"
            ]
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "url",
          "enabled",
          "requires_auth",
          "priority",
          "created_at",
          "updated_at"
        ]
      },
      "CreateRAGRepositoryRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "enabled": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "requires_auth": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "auth_token": {
            "type": [
              "string",
              "null"
            ]
          },
          "priority": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          }
        },
        "required": [
          "name",
          "url"
        ]
      },
      "UpdateRAGRepositoryRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "type": [
              "string",
              "null"
            ]
          },
          "url": {
            "type": [
              "string",
              "null"
            ]
          },
          "enabled": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "requires_auth": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "auth_token": {
            "type": [
              "string",
              "null"
            ]
          },
          "priority": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          }
        }
      },
      "RAGRepositoryConnectionTestResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "available_databases_count": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "AssistantListResponse": {
        "type": "object",
        "properties": {
          "assistants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assistant"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "per_page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "assistants",
          "total",
          "page",
          "per_page"
        ]
      },
      "Assistant": {
        "type": "object",
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "instructions": {
            "type": [
              "string",
              "null"
            ]
          },
          "parameters": {
            "$ref": "#/components/schemas/JsonOption_for_ModelParameters"
          },
          "created_by": {
            "type": [
              "string",
              "null"
            ],
            "format": "uuid"
          },
          "is_template": {
            "type": "boolean"
          },
          "is_default": {
            "type": "boolean"
          },
          "is_active": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "parameters",
          "is_template",
          "is_default",
          "is_active",
          "created_at",
          "updated_at"
        ]
      },
      "CreateAssistantRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "type": "string"
          },
          "instructions": {
            "type": [
              "string",
              "null"
            ]
          },
          "parameters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModelParameters"
              },
              {
                "type": "null"
              }
            ]
          },
          "is_template": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "is_default": {
            "type": [
              "boolean",
              "null"
            ]
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateAssistantRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "type": [
              "string",
              "null"
            ]
          },
          "instructions": {
            "type": [
              "string",
              "null"
            ]
          },
          "parameters": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModelParameters"
              },
              {
                "type": "null"
              }
            ]
          },
          "is_template": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "is_default": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "is_active": {
            "type": [
              "boolean",
              "null"
            ]
          }
        }
      },
      "DownloadPaginationQuery": {
        "type": "object",
        "properties": {
          "page": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "per_page": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "status": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "DownloadInstanceListResponse": {
        "description": "Response for download instance list",
        "type": "object",
        "properties": {
          "downloads": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DownloadInstance"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "per_page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "downloads",
          "total",
          "page",
          "per_page"
        ]
      },
      "SSEDownloadProgressEvent": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "connected": {
                "$ref": "#/components/schemas/SSEDownloadProgressConnectedData"
              }
            },
            "required": [
              "connected"
            ],
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "update": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DownloadProgressUpdate"
                }
              }
            },
            "required": [
              "update"
            ],
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "complete": {
                "type": "string"
              }
            },
            "required": [
              "complete"
            ],
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              }
            },
            "required": [
              "error"
            ],
            "additionalProperties": false
          }
        ]
      },
      "SSEDownloadProgressConnectedData": {
        "type": "object",
        "properties": {
          "message": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "DownloadProgressUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "phase": {
            "$ref": "#/components/schemas/DownloadPhase"
          },
          "current": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64"
          },
          "total": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64"
          },
          "message": {
            "type": [
              "string",
              "null"
            ]
          },
          "speed_bps": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64"
          },
          "eta_seconds": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64"
          },
          "error_message": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "id",
          "status",
          "phase"
        ]
      },
      "EngineInfo": {
        "type": "object",
        "properties": {
          "engine_type": {
            "$ref": "#/components/schemas/EngineType"
          },
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "supported_architectures": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "engine_type",
          "name",
          "version",
          "status"
        ]
      },
      "HardwareInfoResponse": {
        "type": "object",
        "properties": {
          "hardware": {
            "$ref": "#/components/schemas/HardwareInfo"
          }
        },
        "required": [
          "hardware"
        ]
      },
      "HardwareInfo": {
        "type": "object",
        "properties": {
          "operating_system": {
            "$ref": "#/components/schemas/OperatingSystemInfo"
          },
          "cpu": {
            "$ref": "#/components/schemas/CPUInfo"
          },
          "memory": {
            "$ref": "#/components/schemas/MemoryInfo"
          },
          "gpu_devices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GPUDevice"
            }
          }
        },
        "required": [
          "operating_system",
          "cpu",
          "memory",
          "gpu_devices"
        ]
      },
      "OperatingSystemInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "kernel_version": {
            "type": [
              "string",
              "null"
            ]
          },
          "architecture": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "version",
          "architecture"
        ]
      },
      "CPUInfo": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string"
          },
          "architecture": {
            "type": "string"
          },
          "cores": {
            "type": "integer",
            "format": "uint",
            "minimum": 0
          },
          "threads": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint",
            "minimum": 0
          },
          "base_frequency": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0
          },
          "max_frequency": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0
          }
        },
        "required": [
          "model",
          "architecture",
          "cores"
        ]
      },
      "MemoryInfo": {
        "type": "object",
        "properties": {
          "total_ram": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "total_swap": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0
          }
        },
        "required": [
          "total_ram"
        ]
      },
      "GPUDevice": {
        "type": "object",
        "properties": {
          "device_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "vendor": {
            "type": "string"
          },
          "memory": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0
          },
          "driver_version": {
            "type": [
              "string",
              "null"
            ]
          },
          "compute_capabilities": {
            "$ref": "#/components/schemas/GPUComputeCapabilities"
          }
        },
        "required": [
          "device_id",
          "name",
          "vendor",
          "compute_capabilities"
        ]
      },
      "GPUComputeCapabilities": {
        "type": "object",
        "properties": {
          "cuda_support": {
            "type": "boolean"
          },
          "cuda_version": {
            "type": [
              "string",
              "null"
            ]
          },
          "metal_support": {
            "type": "boolean"
          },
          "opencl_support": {
            "type": "boolean"
          },
          "vulkan_support": {
            "type": [
              "boolean",
              "null"
            ]
          }
        },
        "required": [
          "cuda_support",
          "metal_support",
          "opencl_support"
        ]
      },
      "SSEHardwareUsageEvent": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "connected": {
                "$ref": "#/components/schemas/SSEHardwareUsageConnectedData"
              }
            },
            "required": [
              "connected"
            ],
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "update": {
                "$ref": "#/components/schemas/HardwareUsageUpdate"
              }
            },
            "required": [
              "update"
            ],
            "additionalProperties": false
          }
        ]
      },
      "SSEHardwareUsageConnectedData": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "HardwareUsageUpdate": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string"
          },
          "cpu": {
            "$ref": "#/components/schemas/CPUUsage"
          },
          "memory": {
            "$ref": "#/components/schemas/MemoryUsage"
          },
          "gpu_devices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GPUUsage"
            }
          }
        },
        "required": [
          "timestamp",
          "cpu",
          "memory",
          "gpu_devices"
        ]
      },
      "CPUUsage": {
        "type": "object",
        "properties": {
          "usage_percentage": {
            "type": "number",
            "format": "float"
          },
          "temperature": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "frequency": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0
          }
        },
        "required": [
          "usage_percentage"
        ]
      },
      "MemoryUsage": {
        "type": "object",
        "properties": {
          "used_ram": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "available_ram": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          },
          "used_swap": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0
          },
          "available_swap": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0
          },
          "usage_percentage": {
            "type": "number",
            "format": "float"
          }
        },
        "required": [
          "used_ram",
          "available_ram",
          "usage_percentage"
        ]
      },
      "GPUUsage": {
        "type": "object",
        "properties": {
          "device_id": {
            "type": "string"
          },
          "device_name": {
            "type": "string"
          },
          "utilization_percentage": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "memory_used": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0
          },
          "memory_total": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0
          },
          "memory_usage_percentage": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "temperature": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "power_usage": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          }
        },
        "required": [
          "device_id",
          "device_name"
        ]
      },
      "ApiProxyServerConfig": {
        "type": "object",
        "properties": {
          "port": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0,
            "maximum": 65535
          },
          "address": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          },
          "api_key": {
            "type": "string"
          },
          "allow_cors": {
            "type": "boolean"
          },
          "log_level": {
            "type": "string"
          },
          "autostart_on_startup": {
            "type": "boolean"
          }
        },
        "required": [
          "port",
          "address",
          "prefix",
          "api_key",
          "allow_cors",
          "log_level",
          "autostart_on_startup"
        ]
      },
      "ApiProxyServerModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "model_id": {
            "type": "string",
            "format": "uuid"
          },
          "alias_id": {
            "type": [
              "string",
              "null"
            ]
          },
          "enabled": {
            "type": "boolean"
          },
          "is_default": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "model_id",
          "enabled",
          "is_default",
          "created_at",
          "updated_at"
        ]
      },
      "CreateApiProxyServerModelRequest": {
        "type": "object",
        "properties": {
          "model_id": {
            "type": "string",
            "format": "uuid"
          },
          "alias_id": {
            "type": [
              "string",
              "null"
            ]
          },
          "enabled": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "is_default": {
            "type": [
              "boolean",
              "null"
            ]
          }
        },
        "required": [
          "model_id"
        ]
      },
      "UpdateApiProxyServerModelRequest": {
        "type": "object",
        "properties": {
          "alias_id": {
            "type": [
              "string",
              "null"
            ]
          },
          "enabled": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "is_default": {
            "type": [
              "boolean",
              "null"
            ]
          }
        }
      },
      "ApiProxyServerTrustedHost": {
        "type": "object",
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "host": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "host",
          "enabled",
          "created_at",
          "updated_at"
        ]
      },
      "CreateTrustedHostRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "host": {
            "type": "string"
          },
          "enabled": {
            "type": [
              "boolean",
              "null"
            ]
          }
        },
        "required": [
          "host"
        ]
      },
      "UpdateTrustedHostRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "host": {
            "type": [
              "string",
              "null"
            ]
          },
          "enabled": {
            "type": [
              "boolean",
              "null"
            ]
          }
        }
      },
      "ApiProxyServerStatus": {
        "type": "object",
        "properties": {
          "running": {
            "type": "boolean"
          },
          "active_models": {
            "type": "integer",
            "format": "int32"
          },
          "server_url": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "running",
          "active_models"
        ]
      },
      "SSEProxyLogsEvent": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "connected": {
                "$ref": "#/components/schemas/SSEProxyLogsConnectedData"
              }
            },
            "required": [
              "connected"
            ],
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "logUpdate": {
                "$ref": "#/components/schemas/SSEProxyLogsUpdateData"
              }
            },
            "required": [
              "logUpdate"
            ],
            "additionalProperties": false
          }
        ]
      },
      "SSEProxyLogsConnectedData": {
        "type": "object",
        "properties": {
          "message": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "SSEProxyLogsUpdateData": {
        "type": "object",
        "properties": {
          "lines": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "timestamp": {
            "type": "string"
          }
        },
        "required": [
          "lines",
          "timestamp"
        ]
      },
      "UserHello": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "UserSettingsResponse": {
        "type": "object",
        "properties": {
          "settings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSetting"
            }
          }
        },
        "required": [
          "settings"
        ]
      },
      "UserSetting": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          },
          "key": {
            "type": "string"
          },
          "value": true,
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "user_id",
          "key",
          "value",
          "created_at",
          "updated_at"
        ]
      },
      "UserSettingRequest": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": true
        },
        "required": [
          "key",
          "value"
        ]
      },
      "UserSettingsDeletionResponse": {
        "type": "object",
        "properties": {
          "deleted": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0
          }
        },
        "required": [
          "deleted"
        ]
      },
      "ConversationPaginationQuery": {
        "description": "Extended pagination query for conversation-related endpoints",
        "type": "object",
        "properties": {
          "page": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "per_page": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "project_id": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "ConversationListResponse": {
        "type": "object",
        "properties": {
          "conversations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConversationSummary"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "per_page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "conversations",
          "total",
          "page",
          "per_page"
        ]
      },
      "ConversationSummary": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          },
          "project_id": {
            "type": [
              "string",
              "null"
            ],
            "format": "uuid"
          },
          "assistant_id": {
            "type": [
              "string",
              "null"
            ],
            "format": "uuid"
          },
          "model_id": {
            "type": [
              "string",
              "null"
            ],
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_message": {
            "type": [
              "string",
              "null"
            ]
          },
          "message_count": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "id",
          "title",
          "user_id",
          "created_at",
          "updated_at",
          "message_count"
        ]
      },
      "CreateConversationRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "project_id": {
            "type": [
              "string",
              "null"
            ],
            "format": "uuid"
          },
          "assistant_id": {
            "type": "string",
            "format": "uuid"
          },
          "model_id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "title",
          "assistant_id",
          "model_id"
        ]
      },
      "Conversation": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          },
          "project_id": {
            "type": [
              "string",
              "null"
            ],
            "format": "uuid"
          },
          "assistant_id": {
            "type": [
              "string",
              "null"
            ],
            "format": "uuid"
          },
          "model_id": {
            "type": [
              "string",
              "null"
            ],
            "format": "uuid"
          },
          "active_branch_id": {
            "type": [
              "string",
              "null"
            ],
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "user_id",
          "title",
          "created_at",
          "updated_at"
        ]
      },
      "UpdateConversationRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": [
              "string",
              "null"
            ]
          },
          "assistant_id": {
            "type": [
              "string",
              "null"
            ],
            "format": "uuid"
          },
          "model_id": {
            "type": [
              "string",
              "null"
            ],
            "format": "uuid"
          }
        }
      },
      "ChatMessageRequest": {
        "type": "object",
        "properties": {
          "conversation_id": {
            "type": "string",
            "format": "uuid"
          },
          "content": {
            "type": "string"
          },
          "model_id": {
            "type": "string",
            "format": "uuid"
          },
          "assistant_id": {
            "type": "string",
            "format": "uuid"
          },
          "file_ids": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "required": [
          "conversation_id",
          "content",
          "model_id",
          "assistant_id"
        ]
      },
      "SSEChatStreamEvent": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "connected": {
                "$ref": "#/components/schemas/SSEChatStreamConnectedData"
              }
            },
            "required": [
              "connected"
            ],
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "start": {
                "type": "string"
              }
            },
            "required": [
              "start"
            ],
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "chunk": {
                "$ref": "#/components/schemas/StreamChunkData"
              }
            },
            "required": [
              "chunk"
            ],
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "complete": {
                "$ref": "#/components/schemas/StreamCompleteData"
              }
            },
            "required": [
              "complete"
            ],
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "$ref": "#/components/schemas/StreamErrorData"
              }
            },
            "required": [
              "error"
            ],
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "editedMessage": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "required": [
              "editedMessage"
            ],
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "createdBranch": {
                "$ref": "#/components/schemas/MessageBranch"
              }
            },
            "required": [
              "createdBranch"
            ],
            "additionalProperties": false
          }
        ]
      },
      "SSEChatStreamConnectedData": {
        "type": "object",
        "properties": {
          "message": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "StreamChunkData": {
        "type": "object",
        "properties": {
          "delta": {
            "type": "string"
          },
          "message_id": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "delta"
        ]
      },
      "StreamCompleteData": {
        "type": "object",
        "properties": {
          "message_id": {
            "type": "string"
          },
          "conversation_id": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "originated_from_id": {
            "type": "string"
          },
          "edit_count": {
            "type": "integer",
            "format": "int32"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "total_tokens": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          }
        },
        "required": [
          "message_id",
          "conversation_id",
          "role",
          "originated_from_id",
          "edit_count",
          "created_at",
          "updated_at"
        ]
      },
      "StreamErrorData": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "error",
          "code"
        ]
      },
      "Message": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "conversation_id": {
            "type": "string",
            "format": "uuid"
          },
          "role": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "originated_from_id": {
            "type": "string",
            "format": "uuid"
          },
          "edit_count": {
            "type": "integer",
            "format": "int32"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "$ref": "#/components/schemas/JsonOption_for_Array_of_MessageMetadata"
          },
          "files": {
            "$ref": "#/components/schemas/MessageFiles"
          }
        },
        "required": [
          "id",
          "conversation_id",
          "role",
          "content",
          "originated_from_id",
          "edit_count",
          "created_at",
          "updated_at",
          "metadata",
          "files"
        ]
      },
      "JsonOption_for_Array_of_MessageMetadata": {
        "type": [
          "array",
          "null"
        ],
        "items": {
          "$ref": "#/components/schemas/MessageMetadata"
        }
      },
      "MessageMetadata": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "message_id": {
            "type": "string",
            "format": "uuid"
          },
          "key": {
            "type": "string"
          },
          "value": true,
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "message_id",
          "key",
          "value",
          "created_at"
        ]
      },
      "MessageFiles": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/File"
        }
      },
      "File": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          },
          "filename": {
            "type": "string"
          },
          "file_size": {
            "type": "integer",
            "format": "int64"
          },
          "mime_type": {
            "type": [
              "string",
              "null"
            ]
          },
          "checksum": {
            "type": [
              "string",
              "null"
            ]
          },
          "project_id": {
            "type": [
              "string",
              "null"
            ],
            "format": "uuid"
          },
          "thumbnail_count": {
            "type": "integer",
            "format": "int32"
          },
          "page_count": {
            "type": "integer",
            "format": "int32"
          },
          "processing_metadata": true,
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "user_id",
          "filename",
          "file_size",
          "thumbnail_count",
          "page_count",
          "processing_metadata",
          "created_at",
          "updated_at"
        ]
      },
      "MessageBranch": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "conversation_id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "is_clone": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "conversation_id",
          "created_at",
          "is_clone"
        ]
      },
      "SwitchBranchRequest": {
        "type": "object",
        "properties": {
          "branch_id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "branch_id"
        ]
      },
      "OperationSuccessResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "SearchQuery": {
        "type": "object",
        "properties": {
          "q": {
            "type": "string"
          },
          "page": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "per_page": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "project_id": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "q"
        ]
      },
      "ProjectListQuery": {
        "type": "object",
        "properties": {
          "page": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "per_page": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "search": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "ProjectListResponse": {
        "type": "object",
        "properties": {
          "projects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "per_page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "projects",
          "total",
          "page",
          "per_page"
        ]
      },
      "Project": {
        "type": "object",
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "instruction": {
            "type": [
              "string",
              "null"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "user_id",
          "name",
          "created_at",
          "updated_at"
        ]
      },
      "CreateProjectRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "type": "string"
          },
          "instruction": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "name"
        ]
      },
      "ProjectDetailResponse": {
        "type": "object",
        "properties": {
          "project": {
            "$ref": "#/components/schemas/Project"
          },
          "conversations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Conversation"
            }
          }
        },
        "required": [
          "project",
          "conversations"
        ]
      },
      "UpdateProjectRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "type": [
              "string",
              "null"
            ]
          },
          "instruction": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "HubQueryParams": {
        "type": "object",
        "properties": {
          "lang": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "HubModel": {
        "type": "object",
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "alias": {
            "type": "string"
          },
          "repository_url": {
            "type": "string"
          },
          "repository_path": {
            "type": "string"
          },
          "main_filename": {
            "type": "string"
          },
          "file_format": {
            "$ref": "#/components/schemas/FileFormat"
          },
          "capabilities": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModelCapabilities"
              },
              {
                "type": "null"
              }
            ]
          },
          "size_gb": {
            "type": "number",
            "format": "double"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "recommended_parameters": true,
          "public": {
            "type": "boolean"
          },
          "popularity_score": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "license": {
            "type": [
              "string",
              "null"
            ]
          },
          "quantization_options": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/HubModelQuantizationOption"
            }
          },
          "context_length": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint32",
            "minimum": 0
          },
          "language_support": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          },
          "recommended_engine": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EngineType"
              },
              {
                "type": "null"
              }
            ]
          },
          "recommended_engine_settings": true
        },
        "required": [
          "id",
          "name",
          "alias",
          "repository_url",
          "repository_path",
          "main_filename",
          "file_format",
          "size_gb",
          "tags",
          "public"
        ]
      },
      "HubModelQuantizationOption": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "main_filename": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "main_filename"
        ]
      },
      "HubAssistant": {
        "type": "object",
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "instructions": {
            "type": [
              "string",
              "null"
            ]
          },
          "parameters": true,
          "category": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "recommended_models": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "capabilities_required": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "popularity_score": {
            "type": [
              "number",
              "null"
            ],
            "format": "float"
          },
          "author": {
            "type": [
              "string",
              "null"
            ]
          },
          "use_cases": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          },
          "example_prompts": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "name",
          "category",
          "tags",
          "recommended_models",
          "capabilities_required"
        ]
      },
      "HubVersionResponse": {
        "type": "object",
        "properties": {
          "hub_version": {
            "type": "string"
          }
        },
        "required": [
          "hub_version"
        ]
      },
      "UploadFileResponse": {
        "type": "object",
        "properties": {
          "file": {
            "$ref": "#/components/schemas/File"
          }
        },
        "required": [
          "file"
        ]
      },
      "FileOperationSuccessResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          }
        },
        "required": [
          "success"
        ]
      },
      "BlobType": {
        "type": "object"
      },
      "DownloadTokenResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "token",
          "expires_at"
        ]
      },
      "DownloadTokenParams": {
        "type": "object",
        "properties": {
          "token": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "PreviewParams": {
        "type": "object",
        "properties": {
          "page": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint32",
            "minimum": 0
          }
        }
      },
      "FileListParams": {
        "type": "object",
        "properties": {
          "page": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "per_page": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "search": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "FileListResponse": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "per_page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "files",
          "total",
          "page",
          "per_page"
        ]
      },
      "RAGInstanceListQuery": {
        "type": "object",
        "properties": {
          "page": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "per_page": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "include_system": {
            "type": [
              "boolean",
              "null"
            ]
          }
        }
      },
      "CreateRAGInstanceRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "provider_id": {
            "type": "string",
            "format": "uuid"
          },
          "project_id": {
            "type": [
              "string",
              "null"
            ],
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "alias": {
            "type": "string"
          },
          "engine_type": {
            "$ref": "#/components/schemas/RAGEngineType"
          },
          "embedding_model_id": {
            "type": [
              "string",
              "null"
            ],
            "format": "uuid"
          },
          "llm_model_id": {
            "type": [
              "string",
              "null"
            ],
            "format": "uuid"
          },
          "parameters": true,
          "engine_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RAGEngineSettings"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "provider_id",
          "name",
          "alias",
          "engine_type"
        ]
      },
      "RAGStatusStreamQuery": {
        "type": "object",
        "properties": {
          "include_files": {
            "description": "Include file-level details (default: true)",
            "type": [
              "boolean",
              "null"
            ]
          }
        }
      },
      "SSERAGStatusEvent": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "connected": {
                "$ref": "#/components/schemas/SSERAGInstanceStatusConnectedData"
              }
            },
            "required": [
              "connected"
            ],
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "update": {
                "$ref": "#/components/schemas/SSERAGInstanceStatusUpdateData"
              }
            },
            "required": [
              "update"
            ],
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "$ref": "#/components/schemas/SSERAGInstanceStatusErrorData"
              }
            },
            "required": [
              "error"
            ],
            "additionalProperties": false
          }
        ]
      },
      "SSERAGInstanceStatusConnectedData": {
        "type": "object",
        "properties": {
          "instance_id": {
            "type": "string"
          }
        },
        "required": [
          "instance_id"
        ]
      },
      "SSERAGInstanceStatusUpdateData": {
        "type": "object",
        "properties": {
          "instance_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "is_active": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "error_code": {
            "$ref": "#/components/schemas/RAGInstanceErrorCode"
          },
          "total_files": {
            "type": "integer",
            "format": "int64"
          },
          "processed_files": {
            "type": "integer",
            "format": "int64"
          },
          "failed_files": {
            "type": "integer",
            "format": "int64"
          },
          "processing_files": {
            "type": "integer",
            "format": "int64"
          },
          "current_files_processing": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RAGFileProcessingStatus"
            }
          },
          "updated_at": {
            "type": "string"
          }
        },
        "required": [
          "instance_id",
          "name",
          "is_active",
          "enabled",
          "error_code",
          "total_files",
          "processed_files",
          "failed_files",
          "processing_files",
          "current_files_processing",
          "updated_at"
        ]
      },
      "RAGFileProcessingStatus": {
        "type": "object",
        "properties": {
          "file_id": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "stage": {
            "type": [
              "string",
              "null"
            ]
          },
          "error_message": {
            "type": [
              "string",
              "null"
            ]
          },
          "started_at": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "file_id",
          "filename",
          "status"
        ]
      },
      "SSERAGInstanceStatusErrorData": {
        "type": "object",
        "properties": {
          "instance_id": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        },
        "required": [
          "instance_id",
          "error"
        ]
      },
      "RAGInstanceFilesQuery": {
        "type": "object",
        "properties": {
          "page": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "per_page": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "status_filter": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RAGProcessingStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "search": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "RAGProcessingStatus": {
        "type": "string",
        "enum": [
          "pending",
          "processing",
          "completed",
          "failed"
        ]
      },
      "RAGInstanceFilesListResponse": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RAGInstanceFile"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "per_page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "files",
          "total",
          "page",
          "per_page"
        ]
      },
      "RAGInstanceFile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "rag_instance_id": {
            "type": "string",
            "format": "uuid"
          },
          "file_id": {
            "type": "string",
            "format": "uuid"
          },
          "filename": {
            "type": "string"
          },
          "processing_status": {
            "$ref": "#/components/schemas/RAGProcessingStatus"
          },
          "processed_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "processing_error": {
            "type": [
              "string",
              "null"
            ]
          },
          "rag_metadata": true,
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "rag_instance_id",
          "file_id",
          "filename",
          "processing_status",
          "rag_metadata",
          "created_at",
          "updated_at"
        ]
      }
    }
  }
}